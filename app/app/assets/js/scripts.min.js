(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
exports = module.exports = ap;
function ap (args, fn) {
    return function () {
        var rest = [].slice.call(arguments)
            , first = args.slice()
        first.push.apply(first, rest)
        return fn.apply(this, first);
    };
}

exports.pa = pa;
function pa (args, fn) {
    return function () {
        var rest = [].slice.call(arguments)
        rest.push.apply(rest, args)
        return fn.apply(this, rest);
    };
}

exports.apa = apa;
function apa (left, right, fn) {
    return function () {
        return fn.apply(this,
            left.concat.apply(left, arguments).concat(right)
        );
    };
}

exports.partial = partial;
function partial (fn) {
    var args = [].slice.call(arguments, 1);
    return ap(args, fn);
}

exports.partialRight = partialRight;
function partialRight (fn) {
    var args = [].slice.call(arguments, 1);
    return pa(args, fn);
}

exports.curry = curry;
function curry (fn) {
    return partial(partial, fn);
}

exports.curryRight = function curryRight (fn) {
    return partial(partialRight, fn);
}

},{}],2:[function(require,module,exports){
'use strict'

module.exports = function assertOk (value, message) {
  if (!value) {
    throw new Error(message || 'Expected true, got ' + value)
  }
}

},{}],3:[function(require,module,exports){
(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define(['module', 'select'], factory);
    } else if (typeof exports !== "undefined") {
        factory(module, require('select'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod, global.select);
        global.clipboardAction = mod.exports;
    }
})(this, function (module, _select) {
    'use strict';

    var _select2 = _interopRequireDefault(_select);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    var ClipboardAction = function () {
        /**
         * @param {Object} options
         */
        function ClipboardAction(options) {
            _classCallCheck(this, ClipboardAction);

            this.resolveOptions(options);
            this.initSelection();
        }

        /**
         * Defines base properties passed from constructor.
         * @param {Object} options
         */


        _createClass(ClipboardAction, [{
            key: 'resolveOptions',
            value: function resolveOptions() {
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                this.action = options.action;
                this.container = options.container;
                this.emitter = options.emitter;
                this.target = options.target;
                this.text = options.text;
                this.trigger = options.trigger;

                this.selectedText = '';
            }
        }, {
            key: 'initSelection',
            value: function initSelection() {
                if (this.text) {
                    this.selectFake();
                } else if (this.target) {
                    this.selectTarget();
                }
            }
        }, {
            key: 'selectFake',
            value: function selectFake() {
                var _this = this;

                var isRTL = document.documentElement.getAttribute('dir') == 'rtl';

                this.removeFake();

                this.fakeHandlerCallback = function () {
                    return _this.removeFake();
                };
                this.fakeHandler = this.container.addEventListener('click', this.fakeHandlerCallback) || true;

                this.fakeElem = document.createElement('textarea');
                // Prevent zooming on iOS
                this.fakeElem.style.fontSize = '12pt';
                // Reset box model
                this.fakeElem.style.border = '0';
                this.fakeElem.style.padding = '0';
                this.fakeElem.style.margin = '0';
                // Move element out of screen horizontally
                this.fakeElem.style.position = 'absolute';
                this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';
                // Move element to the same position vertically
                var yPosition = window.pageYOffset || document.documentElement.scrollTop;
                this.fakeElem.style.top = yPosition + 'px';

                this.fakeElem.setAttribute('readonly', '');
                this.fakeElem.value = this.text;

                this.container.appendChild(this.fakeElem);

                this.selectedText = (0, _select2.default)(this.fakeElem);
                this.copyText();
            }
        }, {
            key: 'removeFake',
            value: function removeFake() {
                if (this.fakeHandler) {
                    this.container.removeEventListener('click', this.fakeHandlerCallback);
                    this.fakeHandler = null;
                    this.fakeHandlerCallback = null;
                }

                if (this.fakeElem) {
                    this.container.removeChild(this.fakeElem);
                    this.fakeElem = null;
                }
            }
        }, {
            key: 'selectTarget',
            value: function selectTarget() {
                this.selectedText = (0, _select2.default)(this.target);
                this.copyText();
            }
        }, {
            key: 'copyText',
            value: function copyText() {
                var succeeded = void 0;

                try {
                    succeeded = document.execCommand(this.action);
                } catch (err) {
                    succeeded = false;
                }

                this.handleResult(succeeded);
            }
        }, {
            key: 'handleResult',
            value: function handleResult(succeeded) {
                this.emitter.emit(succeeded ? 'success' : 'error', {
                    action: this.action,
                    text: this.selectedText,
                    trigger: this.trigger,
                    clearSelection: this.clearSelection.bind(this)
                });
            }
        }, {
            key: 'clearSelection',
            value: function clearSelection() {
                if (this.trigger) {
                    this.trigger.focus();
                }

                window.getSelection().removeAllRanges();
            }
        }, {
            key: 'destroy',
            value: function destroy() {
                this.removeFake();
            }
        }, {
            key: 'action',
            set: function set() {
                var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'copy';

                this._action = action;

                if (this._action !== 'copy' && this._action !== 'cut') {
                    throw new Error('Invalid "action" value, use either "copy" or "cut"');
                }
            },
            get: function get() {
                return this._action;
            }
        }, {
            key: 'target',
            set: function set(target) {
                if (target !== undefined) {
                    if (target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && target.nodeType === 1) {
                        if (this.action === 'copy' && target.hasAttribute('disabled')) {
                            throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                        }

                        if (this.action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {
                            throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');
                        }

                        this._target = target;
                    } else {
                        throw new Error('Invalid "target" value, use a valid Element');
                    }
                }
            },
            get: function get() {
                return this._target;
            }
        }]);

        return ClipboardAction;
    }();

    module.exports = ClipboardAction;
});
},{"select":21}],4:[function(require,module,exports){
(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define(['module', './clipboard-action', 'tiny-emitter', 'good-listener'], factory);
    } else if (typeof exports !== "undefined") {
        factory(module, require('./clipboard-action'), require('tiny-emitter'), require('good-listener'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod, global.clipboardAction, global.tinyEmitter, global.goodListener);
        global.clipboard = mod.exports;
    }
})(this, function (module, _clipboardAction, _tinyEmitter, _goodListener) {
    'use strict';

    var _clipboardAction2 = _interopRequireDefault(_clipboardAction);

    var _tinyEmitter2 = _interopRequireDefault(_tinyEmitter);

    var _goodListener2 = _interopRequireDefault(_goodListener);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var Clipboard = function (_Emitter) {
        _inherits(Clipboard, _Emitter);

        /**
         * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
         * @param {Object} options
         */
        function Clipboard(trigger, options) {
            _classCallCheck(this, Clipboard);

            var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this));

            _this.resolveOptions(options);
            _this.listenClick(trigger);
            return _this;
        }

        /**
         * Defines if attributes would be resolved using internal setter functions
         * or custom functions that were passed in the constructor.
         * @param {Object} options
         */


        _createClass(Clipboard, [{
            key: 'resolveOptions',
            value: function resolveOptions() {
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                this.action = typeof options.action === 'function' ? options.action : this.defaultAction;
                this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;
                this.text = typeof options.text === 'function' ? options.text : this.defaultText;
                this.container = _typeof(options.container) === 'object' ? options.container : document.body;
            }
        }, {
            key: 'listenClick',
            value: function listenClick(trigger) {
                var _this2 = this;

                this.listener = (0, _goodListener2.default)(trigger, 'click', function (e) {
                    return _this2.onClick(e);
                });
            }
        }, {
            key: 'onClick',
            value: function onClick(e) {
                var trigger = e.delegateTarget || e.currentTarget;

                if (this.clipboardAction) {
                    this.clipboardAction = null;
                }

                this.clipboardAction = new _clipboardAction2.default({
                    action: this.action(trigger),
                    target: this.target(trigger),
                    text: this.text(trigger),
                    container: this.container,
                    trigger: trigger,
                    emitter: this
                });
            }
        }, {
            key: 'defaultAction',
            value: function defaultAction(trigger) {
                return getAttributeValue('action', trigger);
            }
        }, {
            key: 'defaultTarget',
            value: function defaultTarget(trigger) {
                var selector = getAttributeValue('target', trigger);

                if (selector) {
                    return document.querySelector(selector);
                }
            }
        }, {
            key: 'defaultText',
            value: function defaultText(trigger) {
                return getAttributeValue('text', trigger);
            }
        }, {
            key: 'destroy',
            value: function destroy() {
                this.listener.destroy();

                if (this.clipboardAction) {
                    this.clipboardAction.destroy();
                    this.clipboardAction = null;
                }
            }
        }], [{
            key: 'isSupported',
            value: function isSupported() {
                var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];

                var actions = typeof action === 'string' ? [action] : action;
                var support = !!document.queryCommandSupported;

                actions.forEach(function (action) {
                    support = support && !!document.queryCommandSupported(action);
                });

                return support;
            }
        }]);

        return Clipboard;
    }(_tinyEmitter2.default);

    /**
     * Helper function to retrieve attribute value.
     * @param {String} suffix
     * @param {Element} element
     */
    function getAttributeValue(suffix, element) {
        var attribute = 'data-clipboard-' + suffix;

        if (!element.hasAttribute(attribute)) {
            return;
        }

        return element.getAttribute(attribute);
    }

    module.exports = Clipboard;
});
},{"./clipboard-action":3,"good-listener":12,"tiny-emitter":24}],5:[function(require,module,exports){
'use strict';
var token = '%[a-f0-9]{2}';
var singleMatcher = new RegExp(token, 'gi');
var multiMatcher = new RegExp('(' + token + ')+', 'gi');

function decodeComponents(components, split) {
	try {
		// Try to decode the entire string first
		return decodeURIComponent(components.join(''));
	} catch (err) {
		// Do nothing
	}

	if (components.length === 1) {
		return components;
	}

	split = split || 1;

	// Split the array in 2 parts
	var left = components.slice(0, split);
	var right = components.slice(split);

	return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
}

function decode(input) {
	try {
		return decodeURIComponent(input);
	} catch (err) {
		var tokens = input.match(singleMatcher);

		for (var i = 1; i < tokens.length; i++) {
			input = decodeComponents(tokens, i).join('');

			tokens = input.match(singleMatcher);
		}

		return input;
	}
}

function customDecodeURIComponent(input) {
	// Keep track of all the replacements and prefill the map with the `BOM`
	var replaceMap = {
		'%FE%FF': '\uFFFD\uFFFD',
		'%FF%FE': '\uFFFD\uFFFD'
	};

	var match = multiMatcher.exec(input);
	while (match) {
		try {
			// Decode as big chunks as possible
			replaceMap[match[0]] = decodeURIComponent(match[0]);
		} catch (err) {
			var result = decode(match[0]);

			if (result !== match[0]) {
				replaceMap[match[0]] = result;
			}
		}

		match = multiMatcher.exec(input);
	}

	// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
	replaceMap['%C2'] = '\uFFFD';

	var entries = Object.keys(replaceMap);

	for (var i = 0; i < entries.length; i++) {
		// Replace all decoded components
		var key = entries[i];
		input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
	}

	return input;
}

module.exports = function (encodedURI) {
	if (typeof encodedURI !== 'string') {
		throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
	}

	try {
		encodedURI = encodedURI.replace(/\+/g, ' ');

		// Try the built in decoder first
		return decodeURIComponent(encodedURI);
	} catch (err) {
		// Fallback to a more advanced decoder
		return customDecodeURIComponent(encodedURI);
	}
};

},{}],6:[function(require,module,exports){
var DOCUMENT_NODE_TYPE = 9;

/**
 * A polyfill for Element.matches()
 */
if (typeof Element !== 'undefined' && !Element.prototype.matches) {
    var proto = Element.prototype;

    proto.matches = proto.matchesSelector ||
                    proto.mozMatchesSelector ||
                    proto.msMatchesSelector ||
                    proto.oMatchesSelector ||
                    proto.webkitMatchesSelector;
}

/**
 * Finds the closest parent that matches a selector.
 *
 * @param {Element} element
 * @param {String} selector
 * @return {Function}
 */
function closest (element, selector) {
    while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
        if (typeof element.matches === 'function' &&
            element.matches(selector)) {
          return element;
        }
        element = element.parentNode;
    }
}

module.exports = closest;

},{}],7:[function(require,module,exports){
var closest = require('./closest');

/**
 * Delegates event to a selector.
 *
 * @param {Element} element
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @param {Boolean} useCapture
 * @return {Object}
 */
function delegate(element, selector, type, callback, useCapture) {
    var listenerFn = listener.apply(this, arguments);

    element.addEventListener(type, listenerFn, useCapture);

    return {
        destroy: function() {
            element.removeEventListener(type, listenerFn, useCapture);
        }
    }
}

/**
 * Finds closest match and invokes callback.
 *
 * @param {Element} element
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @return {Function}
 */
function listener(element, selector, type, callback) {
    return function(e) {
        e.delegateTarget = closest(e.target, selector);

        if (e.delegateTarget) {
            callback.call(element, e);
        }
    }
}

module.exports = delegate;

},{"./closest":6}],8:[function(require,module,exports){
'use strict';

var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

module.exports = function (str) {
	if (typeof str !== 'string') {
		throw new TypeError('Expected a string');
	}

	return str.replace(matchOperatorsRe, '\\$&');
};

},{}],9:[function(require,module,exports){
'use strict'

var assert = require('assert-ok')
var Integer = require('parse-int')
var qs = require('query-string')
var setQuery = require('url-set-query')
var Snake = require('snakecase-keys')
var extend = require('xtend')
var partial = require('ap').partial
var pipe = require('value-pipe')

var base = 'https://www.facebook.com/dialog/share'

module.exports = function FacebookShare (app) {
  assert(Integer(app), 'facebook app id is required')

  return pipe(
    partial(extend, {
      appId: app
    }),
    Snake,
    qs.stringify,
    partial(setQuery, base)
  )
}

},{"ap":1,"assert-ok":2,"parse-int":19,"query-string":10,"snakecase-keys":22,"url-set-query":29,"value-pipe":30,"xtend":31}],10:[function(require,module,exports){
'use strict';
var strictUriEncode = require('strict-uri-encode');

exports.extract = function (str) {
	return str.split('?')[1] || '';
};

exports.parse = function (str) {
	if (typeof str !== 'string') {
		return {};
	}

	str = str.trim().replace(/^(\?|#|&)/, '');

	if (!str) {
		return {};
	}

	return str.split('&').reduce(function (ret, param) {
		var parts = param.replace(/\+/g, ' ').split('=');
		// Firefox (pre 40) decodes `%3D` to `=`
		// https://github.com/sindresorhus/query-string/pull/37
		var key = parts.shift();
		var val = parts.length > 0 ? parts.join('=') : undefined;

		key = decodeURIComponent(key);

		// missing `=` should be `null`:
		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
		val = val === undefined ? null : decodeURIComponent(val);

		if (!ret.hasOwnProperty(key)) {
			ret[key] = val;
		} else if (Array.isArray(ret[key])) {
			ret[key].push(val);
		} else {
			ret[key] = [ret[key], val];
		}

		return ret;
	}, {});
};

exports.stringify = function (obj) {
	return obj ? Object.keys(obj).sort().map(function (key) {
		var val = obj[key];

		if (val === undefined) {
			return '';
		}

		if (val === null) {
			return key;
		}

		if (Array.isArray(val)) {
			return val.slice().sort().map(function (val2) {
				return strictUriEncode(key) + '=' + strictUriEncode(val2);
			}).join('&');
		}

		return strictUriEncode(key) + '=' + strictUriEncode(val);
	}).filter(function (x) {
		return x.length > 0;
	}).join('&') : '';
};

},{"strict-uri-encode":23}],11:[function(require,module,exports){
/**
 * Check if argument is a HTML element.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.node = function(value) {
    return value !== undefined
        && value instanceof HTMLElement
        && value.nodeType === 1;
};

/**
 * Check if argument is a list of HTML elements.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.nodeList = function(value) {
    var type = Object.prototype.toString.call(value);

    return value !== undefined
        && (type === '[object NodeList]' || type === '[object HTMLCollection]')
        && ('length' in value)
        && (value.length === 0 || exports.node(value[0]));
};

/**
 * Check if argument is a string.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.string = function(value) {
    return typeof value === 'string'
        || value instanceof String;
};

/**
 * Check if argument is a function.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.fn = function(value) {
    var type = Object.prototype.toString.call(value);

    return type === '[object Function]';
};

},{}],12:[function(require,module,exports){
var is = require('./is');
var delegate = require('delegate');

/**
 * Validates all params and calls the right
 * listener function based on its target type.
 *
 * @param {String|HTMLElement|HTMLCollection|NodeList} target
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listen(target, type, callback) {
    if (!target && !type && !callback) {
        throw new Error('Missing required arguments');
    }

    if (!is.string(type)) {
        throw new TypeError('Second argument must be a String');
    }

    if (!is.fn(callback)) {
        throw new TypeError('Third argument must be a Function');
    }

    if (is.node(target)) {
        return listenNode(target, type, callback);
    }
    else if (is.nodeList(target)) {
        return listenNodeList(target, type, callback);
    }
    else if (is.string(target)) {
        return listenSelector(target, type, callback);
    }
    else {
        throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');
    }
}

/**
 * Adds an event listener to a HTML element
 * and returns a remove listener function.
 *
 * @param {HTMLElement} node
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenNode(node, type, callback) {
    node.addEventListener(type, callback);

    return {
        destroy: function() {
            node.removeEventListener(type, callback);
        }
    }
}

/**
 * Add an event listener to a list of HTML elements
 * and returns a remove listener function.
 *
 * @param {NodeList|HTMLCollection} nodeList
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenNodeList(nodeList, type, callback) {
    Array.prototype.forEach.call(nodeList, function(node) {
        node.addEventListener(type, callback);
    });

    return {
        destroy: function() {
            Array.prototype.forEach.call(nodeList, function(node) {
                node.removeEventListener(type, callback);
            });
        }
    }
}

/**
 * Add an event listener to a selector
 * and returns a remove listener function.
 *
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenSelector(selector, type, callback) {
    return delegate(document.body, selector, type, callback);
}

module.exports = listen;

},{"./is":11,"delegate":7}],13:[function(require,module,exports){
'use strict';
var numberIsNan = require('number-is-nan');

module.exports = Number.isFinite || function (val) {
	return !(typeof val !== 'number' || numberIsNan(val) || val === Infinity || val === -Infinity);
};

},{"number-is-nan":17}],14:[function(require,module,exports){
// https://github.com/paulmillr/es6-shim
// http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isinteger
var isFinite = require("is-finite");
module.exports = Number.isInteger || function(val) {
  return typeof val === "number" &&
    isFinite(val) &&
    Math.floor(val) === val;
};

},{"is-finite":13}],15:[function(require,module,exports){
/*!
 * JavaScript Cookie v2.2.0
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
;(function (factory) {
	var registeredInModuleLoader = false;
	if (typeof define === 'function' && define.amd) {
		define(factory);
		registeredInModuleLoader = true;
	}
	if (typeof exports === 'object') {
		module.exports = factory();
		registeredInModuleLoader = true;
	}
	if (!registeredInModuleLoader) {
		var OldCookies = window.Cookies;
		var api = window.Cookies = factory();
		api.noConflict = function () {
			window.Cookies = OldCookies;
			return api;
		};
	}
}(function () {
	function extend () {
		var i = 0;
		var result = {};
		for (; i < arguments.length; i++) {
			var attributes = arguments[ i ];
			for (var key in attributes) {
				result[key] = attributes[key];
			}
		}
		return result;
	}

	function init (converter) {
		function api (key, value, attributes) {
			var result;
			if (typeof document === 'undefined') {
				return;
			}

			// Write

			if (arguments.length > 1) {
				attributes = extend({
					path: '/'
				}, api.defaults, attributes);

				if (typeof attributes.expires === 'number') {
					var expires = new Date();
					expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);
					attributes.expires = expires;
				}

				// We're using "expires" because "max-age" is not supported by IE
				attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

				try {
					result = JSON.stringify(value);
					if (/^[\{\[]/.test(result)) {
						value = result;
					}
				} catch (e) {}

				if (!converter.write) {
					value = encodeURIComponent(String(value))
						.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
				} else {
					value = converter.write(value, key);
				}

				key = encodeURIComponent(String(key));
				key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
				key = key.replace(/[\(\)]/g, escape);

				var stringifiedAttributes = '';

				for (var attributeName in attributes) {
					if (!attributes[attributeName]) {
						continue;
					}
					stringifiedAttributes += '; ' + attributeName;
					if (attributes[attributeName] === true) {
						continue;
					}
					stringifiedAttributes += '=' + attributes[attributeName];
				}
				return (document.cookie = key + '=' + value + stringifiedAttributes);
			}

			// Read

			if (!key) {
				result = {};
			}

			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all. Also prevents odd result when
			// calling "get()"
			var cookies = document.cookie ? document.cookie.split('; ') : [];
			var rdecode = /(%[0-9A-Z]{2})+/g;
			var i = 0;

			for (; i < cookies.length; i++) {
				var parts = cookies[i].split('=');
				var cookie = parts.slice(1).join('=');

				if (!this.json && cookie.charAt(0) === '"') {
					cookie = cookie.slice(1, -1);
				}

				try {
					var name = parts[0].replace(rdecode, decodeURIComponent);
					cookie = converter.read ?
						converter.read(cookie, name) : converter(cookie, name) ||
						cookie.replace(rdecode, decodeURIComponent);

					if (this.json) {
						try {
							cookie = JSON.parse(cookie);
						} catch (e) {}
					}

					if (key === name) {
						result = cookie;
						break;
					}

					if (!key) {
						result[name] = cookie;
					}
				} catch (e) {}
			}

			return result;
		}

		api.set = api;
		api.get = function (key) {
			return api.call(api, key);
		};
		api.getJSON = function () {
			return api.apply({
				json: true
			}, [].slice.call(arguments));
		};
		api.defaults = {};

		api.remove = function (key, attributes) {
			api(key, '', extend(attributes, {
				expires: -1
			}));
		};

		api.withConverter = init;

		return api;
	}

	return init(function () {});
}));

},{}],16:[function(require,module,exports){
'use strict';
module.exports = function (obj, cb) {
	var ret = {};
	var keys = Object.keys(obj);

	for (var i = 0; i < keys.length; i++) {
		var key = keys[i];
		var res = cb(key, obj[key], obj);
		ret[res[0]] = res[1];
	}

	return ret;
};

},{}],17:[function(require,module,exports){
'use strict';
module.exports = Number.isNaN || function (x) {
	return x !== x;
};

},{}],18:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],19:[function(require,module,exports){
'use strict'

var isInteger = require('is-integer')

module.exports = function parseIntStrict (integer) {
  if (typeof integer === 'number') {
    return isInteger(integer) ? integer : undefined
  }
  if (typeof integer === 'string') {
    return /^-?\d+$/.test(integer) ? parseInt(integer, 10) : undefined
  }
}

},{"is-integer":14}],20:[function(require,module,exports){
'use strict';
var strictUriEncode = require('strict-uri-encode');
var objectAssign = require('object-assign');
var decodeComponent = require('decode-uri-component');

function encoderForArrayFormat(opts) {
	switch (opts.arrayFormat) {
		case 'index':
			return function (key, value, index) {
				return value === null ? [
					encode(key, opts),
					'[',
					index,
					']'
				].join('') : [
					encode(key, opts),
					'[',
					encode(index, opts),
					']=',
					encode(value, opts)
				].join('');
			};

		case 'bracket':
			return function (key, value) {
				return value === null ? encode(key, opts) : [
					encode(key, opts),
					'[]=',
					encode(value, opts)
				].join('');
			};

		default:
			return function (key, value) {
				return value === null ? encode(key, opts) : [
					encode(key, opts),
					'=',
					encode(value, opts)
				].join('');
			};
	}
}

function parserForArrayFormat(opts) {
	var result;

	switch (opts.arrayFormat) {
		case 'index':
			return function (key, value, accumulator) {
				result = /\[(\d*)\]$/.exec(key);

				key = key.replace(/\[\d*\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				}

				if (accumulator[key] === undefined) {
					accumulator[key] = {};
				}

				accumulator[key][result[1]] = value;
			};

		case 'bracket':
			return function (key, value, accumulator) {
				result = /(\[\])$/.exec(key);
				key = key.replace(/\[\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				} else if (accumulator[key] === undefined) {
					accumulator[key] = [value];
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};

		default:
			return function (key, value, accumulator) {
				if (accumulator[key] === undefined) {
					accumulator[key] = value;
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};
	}
}

function encode(value, opts) {
	if (opts.encode) {
		return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
	}

	return value;
}

function keysSorter(input) {
	if (Array.isArray(input)) {
		return input.sort();
	} else if (typeof input === 'object') {
		return keysSorter(Object.keys(input)).sort(function (a, b) {
			return Number(a) - Number(b);
		}).map(function (key) {
			return input[key];
		});
	}

	return input;
}

exports.extract = function (str) {
	var queryStart = str.indexOf('?');
	if (queryStart === -1) {
		return '';
	}
	return str.slice(queryStart + 1);
};

exports.parse = function (str, opts) {
	opts = objectAssign({arrayFormat: 'none'}, opts);

	var formatter = parserForArrayFormat(opts);

	// Create an object with no prototype
	// https://github.com/sindresorhus/query-string/issues/47
	var ret = Object.create(null);

	if (typeof str !== 'string') {
		return ret;
	}

	str = str.trim().replace(/^[?#&]/, '');

	if (!str) {
		return ret;
	}

	str.split('&').forEach(function (param) {
		var parts = param.replace(/\+/g, ' ').split('=');
		// Firefox (pre 40) decodes `%3D` to `=`
		// https://github.com/sindresorhus/query-string/pull/37
		var key = parts.shift();
		var val = parts.length > 0 ? parts.join('=') : undefined;

		// missing `=` should be `null`:
		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
		val = val === undefined ? null : decodeComponent(val);

		formatter(decodeComponent(key), val, ret);
	});

	return Object.keys(ret).sort().reduce(function (result, key) {
		var val = ret[key];
		if (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {
			// Sort object keys, not values
			result[key] = keysSorter(val);
		} else {
			result[key] = val;
		}

		return result;
	}, Object.create(null));
};

exports.stringify = function (obj, opts) {
	var defaults = {
		encode: true,
		strict: true,
		arrayFormat: 'none'
	};

	opts = objectAssign(defaults, opts);

	if (opts.sort === false) {
		opts.sort = function () {};
	}

	var formatter = encoderForArrayFormat(opts);

	return obj ? Object.keys(obj).sort(opts.sort).map(function (key) {
		var val = obj[key];

		if (val === undefined) {
			return '';
		}

		if (val === null) {
			return encode(key, opts);
		}

		if (Array.isArray(val)) {
			var result = [];

			val.slice().forEach(function (val2) {
				if (val2 === undefined) {
					return;
				}

				result.push(formatter(key, val2, result.length));
			});

			return result.join('&');
		}

		return encode(key, opts) + '=' + encode(val, opts);
	}).filter(function (x) {
		return x.length > 0;
	}).join('&') : '';
};

exports.parseUrl = function (str, opts) {
	return {
		url: str.split('?')[0] || '',
		query: this.parse(this.extract(str), opts)
	};
};

},{"decode-uri-component":5,"object-assign":18,"strict-uri-encode":23}],21:[function(require,module,exports){
function select(element) {
    var selectedText;

    if (element.nodeName === 'SELECT') {
        element.focus();

        selectedText = element.value;
    }
    else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
        var isReadOnly = element.hasAttribute('readonly');

        if (!isReadOnly) {
            element.setAttribute('readonly', '');
        }

        element.select();
        element.setSelectionRange(0, element.value.length);

        if (!isReadOnly) {
            element.removeAttribute('readonly');
        }

        selectedText = element.value;
    }
    else {
        if (element.hasAttribute('contenteditable')) {
            element.focus();
        }

        var selection = window.getSelection();
        var range = document.createRange();

        range.selectNodeContents(element);
        selection.removeAllRanges();
        selection.addRange(range);

        selectedText = selection.toString();
    }

    return selectedText;
}

module.exports = select;

},{}],22:[function(require,module,exports){
'use strict'

var map = require('map-obj')
var snakeCase = require('to-snake-case')

module.exports = function (obj) {
  return map(obj, function (key, val) {
    return [snakeCase(key), val]
  })
}

},{"map-obj":16,"to-snake-case":27}],23:[function(require,module,exports){
'use strict';
module.exports = function (str) {
	return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
		return '%' + c.charCodeAt(0).toString(16).toUpperCase();
	});
};

},{}],24:[function(require,module,exports){
function E () {
  // Keep this empty so it's easier to inherit from
  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
}

E.prototype = {
  on: function (name, callback, ctx) {
    var e = this.e || (this.e = {});

    (e[name] || (e[name] = [])).push({
      fn: callback,
      ctx: ctx
    });

    return this;
  },

  once: function (name, callback, ctx) {
    var self = this;
    function listener () {
      self.off(name, listener);
      callback.apply(ctx, arguments);
    };

    listener._ = callback
    return this.on(name, listener, ctx);
  },

  emit: function (name) {
    var data = [].slice.call(arguments, 1);
    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
    var i = 0;
    var len = evtArr.length;

    for (i; i < len; i++) {
      evtArr[i].fn.apply(evtArr[i].ctx, data);
    }

    return this;
  },

  off: function (name, callback) {
    var e = this.e || (this.e = {});
    var evts = e[name];
    var liveEvents = [];

    if (evts && callback) {
      for (var i = 0, len = evts.length; i < len; i++) {
        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
          liveEvents.push(evts[i]);
      }
    }

    // Remove event from queue to prevent memory leak
    // Suggested by https://github.com/lazd
    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

    (liveEvents.length)
      ? e[name] = liveEvents
      : delete e[name];

    return this;
  }
};

module.exports = E;

},{}],25:[function(require,module,exports){
module.exports = toArray

function toArray(list, index) {
    var array = []

    index = index || 0

    for (var i = index || 0; i < list.length; i++) {
        array[i - index] = list[i]
    }

    return array
}

},{}],26:[function(require,module,exports){

/**
 * Expose `toNoCase`.
 */

module.exports = toNoCase;


/**
 * Test whether a string is camel-case.
 */

var hasSpace = /\s/;
var hasCamel = /[a-z][A-Z]/;
var hasSeparator = /[\W_]/;


/**
 * Remove any starting case from a `string`, like camel or snake, but keep
 * spaces and punctuation that may be important otherwise.
 *
 * @param {String} string
 * @return {String}
 */

function toNoCase (string) {
  if (hasSpace.test(string)) return string.toLowerCase();

  if (hasSeparator.test(string)) string = unseparate(string);
  if (hasCamel.test(string)) string = uncamelize(string);
  return string.toLowerCase();
}


/**
 * Separator splitter.
 */

var separatorSplitter = /[\W_]+(.|$)/g;


/**
 * Un-separate a `string`.
 *
 * @param {String} string
 * @return {String}
 */

function unseparate (string) {
  return string.replace(separatorSplitter, function (m, next) {
    return next ? ' ' + next : '';
  });
}


/**
 * Camelcase splitter.
 */

var camelSplitter = /(.)([A-Z]+)/g;


/**
 * Un-camelcase a `string`.
 *
 * @param {String} string
 * @return {String}
 */

function uncamelize (string) {
  return string.replace(camelSplitter, function (m, previous, uppers) {
    return previous + ' ' + uppers.toLowerCase().split('').join(' ');
  });
}
},{}],27:[function(require,module,exports){
var toSpace = require('to-space-case');


/**
 * Expose `toSnakeCase`.
 */

module.exports = toSnakeCase;


/**
 * Convert a `string` to snake case.
 *
 * @param {String} string
 * @return {String}
 */


function toSnakeCase (string) {
  return toSpace(string).replace(/\s/g, '_');
}

},{"to-space-case":28}],28:[function(require,module,exports){

var clean = require('to-no-case');


/**
 * Expose `toSpaceCase`.
 */

module.exports = toSpaceCase;


/**
 * Convert a `string` to space case.
 *
 * @param {String} string
 * @return {String}
 */


function toSpaceCase (string) {
  return clean(string).replace(/[\W_]+(.|$)/g, function (matches, match) {
    return match ? ' ' + match : '';
  });
}
},{"to-no-case":26}],29:[function(require,module,exports){
module.exports = urlSetQuery
function urlSetQuery (url, query) {
  if (query) {
    // remove optional leading symbols
    query = query.trim().replace(/^(\?|#|&)/, '')

    // don't append empty query
    query = query ? ('?' + query) : query

    var parts = url.split(/[\?\#]/)
    var start = parts[0]
    if (query && /\:\/\/[^\/]*$/.test(start)) {
      // e.g. http://foo.com -> http://foo.com/
      start = start + '/'
    }
    var match = url.match(/(\#.*)$/)
    url = start + query
    if (match) { // add hash back in
      url = url + match[0]
    }
  }
  return url
}

},{}],30:[function(require,module,exports){
'use strict'

var toArray = require('to-array')

module.exports = valuePipe

function valuePipe (fns) {
  if (!fns) throw new TypeError('At least one function is required')
  if (!Array.isArray(fns)) return valuePipe(toArray(arguments))
  return function valuePipeline (value) {
    for (var i = 0; i < fns.length; i++) {
      value = fns[i](value)
    }
    return value
  }
}

},{"to-array":25}],31:[function(require,module,exports){
module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}

},{}],32:[function(require,module,exports){
'use strict';

var animatePage = function animatePage(wrapper, page, dir, cb) {
  var callback = cb || false;

  wrapper.css('min-height', '100vh');
  wrapper.append(page);

  if (dir && !IGNOREDIR) {
    page.addClass('pageTrans pageTrans--' + dir);
    setTimeout(function () {
      page.removeClass('pageTrans--' + dir);
    }, 20);
    setTimeout(function () {
      page.removeClass('pageTrans');
      if (callback) callback();
    }, TRANSITIONTIME);
  } else {
    if (callback) callback();
  }

  wrapper.css('min-height');
};

module.exports = animatePage;

},{}],33:[function(require,module,exports){
'use strict';

var buildPage = require('./buildPage');
var destroyPage = require('./destroyPage');
var eqHeight = require('./eqHeight');

$(document).ready(function () {
  $('html').removeClass('no-js');

  window.HASPAGE = false;
  window.TRANSITIONTIME = 500;
  window.SOCIALINIT = false;
  window.DESCRIPTION = '';
  window.JUMPTOACTIVE = false;
  window.SEARCHTERM = '';
  window.IGNOREDIR = false;

  window.IS_TOUCH_SCREEN = false;
  window.addEventListener('touchstart', function _detectTouch() {
    window.IS_TOUCH_SCREEN = true;
    window.removeEventListener('touchstart', _detectTouch, false);
  });

  var History = window.history;
  var wrapper = $('.app-wrapper');
  var endpoint = $('body').attr('data-endpoint');
  var queriedObject = $('body').attr('data-id');

  var sequence = { prev: 0, curr: 0 };

  wrapper.empty();
  buildPage(wrapper, endpoint, queriedObject, false);

  $('body').on('click', '.js-internalLink', function (e) {
    if ($(e.target).attr('data-nolink')) {
      e.preventDefault();
      return false;
    }

    HASPAGE = true;
    if (IGNOREDIR) return;
    e.preventDefault();
    var target = $(this).attr('href');
    var _endpoint = $(this).attr('data-type');
    var _queriedObject = $(this).attr('data-id');

    $('html, body').animate({
      scrollTop: 0
    }, TRANSITIONTIME);

    destroyPage(wrapper, 'left');
    buildPage(wrapper, _endpoint, _queriedObject, 'right');

    sequence = { prev: sequence.curr, curr: sequence.curr + 1 };

    History.pushState({ endpoint: _endpoint,
      queriedObject: _queriedObject,
      sequence: sequence }, null, target);
    return false;
  });

  $(window).on('popstate', function () {
    if (!HASPAGE) {
      IGNOREDIR = true;
    }
    var _endpoint = history.state ? history.state.endpoint : endpoint;
    var _queriedObject = history.state ? history.state.queriedObject : queriedObject;
    var _sequence = history.state ? history.state.sequence : false;

    if (IGNOREDIR) return;
    if (_sequence) {
      if (sequence.prev === _sequence.curr) {
        destroyPage(wrapper, 'right');
        buildPage(wrapper, _endpoint, _queriedObject, 'left');
      }

      if (sequence.curr === _sequence.prev) {
        destroyPage(wrapper, 'left');
        buildPage(wrapper, _endpoint, _queriedObject, 'right');
      }

      sequence = _sequence;
    } else {
      destroyPage(wrapper, 'right');
      buildPage(wrapper, _endpoint, _queriedObject, 'left');
    }
  });

  eqHeight('.js-eqHeight');
});

},{"./buildPage":42,"./destroyPage":51,"./eqHeight":52}],34:[function(require,module,exports){
'use strict';

var cachebust = require('./cachebust');
var buildContentNode = require('./buildContentNode');
var cutoff = require('./cutoff');
var icon = require('./icon');
var respBg = require('./respBg');
var sublink = require('./sublink');
var Cookies = require('js-cookie');
var qs = require('query-string');

var buildArchive = function buildArchive(page, _ref, endpoint, hasNav, mediaTypes) {
  var items = _ref.items,
      image = _ref.image,
      name = _ref.name,
      total_hits = _ref.total_hits,
      results = _ref.results,
      error = _ref.error,
      message = _ref.message;

  var isCondensed = hasNav && Cookies.get('ARCHIVEVIEW') === 'condense';
  var isSearch = !!total_hits;
  var archiveOrder = Cookies.get('ARCHIVEORDER');

  var nav = void 0,
      load = void 0,
      subheading = void 0;

  var header = '\n    <header class="contentHeader contentHeader--archive">\n      <h2>' + (error || decodeURI(name)) + '</h2>\n      ' + (!image ? '' : '<figure class="heroImage js-respBg" data-set="hero" data-id="' + image + '"/>') + '\n    </header>\n  ';

  var feed = '\n    <ul class="content-feed ' + (isCondensed ? 'content-feed--contracted' : '') + '">\n      ' + (items ? items.map(function (item) {
    return buildContentNode(item);
  }).join(' ') : message || 'Sorry, no results were found.') + '\n    </ul>\n  ';

  if (hasNav) {
    var mediaSelect = void 0;
    var sortOptions = [{ value: 'abc_asc', label: 'A-Z' }, { value: 'abc_desc', label: 'Z-A' }, { value: 'date_desc', label: 'Date Interviewed' }, { value: 'publish_desc', label: 'Date Published' }, { value: 'date_asc', label: 'Date Interviewed (reverse)' }, { value: 'publish_asc', label: 'Date Published (reverse)' }];

    if (mediaTypes) {
      var _mediaSelect = '\n        <select name="media-select">\n          ' + mediaTypes.map(function (type) {
        return '<option value="' + type.toLowerCase().replace(' ', '-') + '">' + type + '</option>';
      }).join(' ') + '\n        </section>\n      ';
    }

    nav = '\n      <div class="listView">\n        <span class="listView-label">change view:</span>\n        <input type="radio" name="list-view" value="explode" ' + (!isCondensed ? 'checked' : '') + '>\n        ' + icon('explode', 'listView') + '\n        <input type="radio" name="list-view" value="condense" ' + (isCondensed ? 'checked' : '') + '>\n        ' + icon('condense', 'listView') + '\n        <span class="listview-label">change view:</span>\n        <select name="list-order">\n          ' + sortOptions.map(function (_ref2) {
      var value = _ref2.value,
          label = _ref2.label;
      return '<option value="' + value + '" ' + (archiveOrder === value ? 'selected' : '') + '>' + label + '</option>';
    }).join(' ') + '\n        </select>\n        ' + (!mediaSelect ? '' : '<span class="listView-label">media type:</span>' + mediaSelect) + '\n      </div>\n    ';
  }

  if (!isSearch && items && items.length >= COUNT) {
    load = '<button data-offset="0" class="content-load">Load More</button>';
  }

  if (total_hits && results) {
    subheading = '\n      <div>\n        <p class="content-subheading">\n          Showing ' + total_hits + ' hits across ' + results + ' files\n          <button class="content-cutoff" data-cutoff-all data-alttext=\'Contract All ' + icon('up') + '\'>Expand All ' + icon('down') + '</button>\n        </p>\n      </div>';
  }

  var $append = $('' + header + (subheading || '') + (nav || '') + feed + (load || ''));
  page.append($append);

  var $feed = page.find('.content-feed');
  var $load = page.find('.content-load');
  var handleUpdate = function handleUpdate() {
    var loadedMore = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    var $order = $append.find('select[name="list-order"]');
    var $media = $append.find('select[name="media-type"]');
    var offset = parseInt($load.attr('data-offset')) + COUNT;
    var params = {
      order: $order.val(),
      offset: loadedMore ? offset : 0,
      count: COUNT,
      include: $media ? $media.val() : null
    };

    var dest = endpoint === 'search' ? endpoint + '/' + $('body').attr('data-search') : endpoint;

    var url = '/wp-json/v1/' + dest + '?' + qs.stringify(params) + cachebust(true);

    console.log(url);

    $.get(url, function (_ref3) {
      var items = _ref3.items;

      if (!items) {
        $load.hide();
        return;
      }

      if (!loadedMore) $feed.empty();
      $feed.append('\n        ' + items.map(function (item) {
        return buildContentNode(item);
      }).join(' ') + '\n      ');

      if (loadedMore) {
        if (items.length < COUNT) {
          $load.hide();
        } else {
          $load.attr('data-offset', offset);
        }
      } else {
        $load.attr('data-offset', 0);
      }
    });
  };

  var changeView = function changeView() {
    var value = $(this).val();
    var className = 'content-feed--contracted';
    var $feed = $('.content-feed');

    if (value === 'condense') {
      $feed.addClass(className);
    } else {
      $feed.removeClass(className);
    }
    Cookies.set('ARCHIVEVIEW', value);
  };

  var changeOrder = function changeOrder() {
    var value = $(this).val();
    Cookies.set('ARCHIVEORDER', value);
  };

  $append.on('click', 'input[name="list-view"]', changeView);
  $append.on('change', 'select[name="list-order"]', function () {
    handleUpdate();
    changeOrder.bind(this)();
  });
  $append.on('change', 'input[name="media-type"]', function () {
    handleUpdate();
  });
  page.on('click', '.content-load', function () {
    handleUpdate(true);
  });

  if (image) {
    respBg($append.find('.respImg'));
  }

  sublink($append.find('[data-sublink]'));
  cutoff($append.find('[data-cutoff]'), $append.find('[data-cutoff-all]'));
};

module.exports = buildArchive;

},{"./buildContentNode":39,"./cachebust":49,"./cutoff":50,"./icon":57,"./respBg":59,"./sublink":65,"js-cookie":15,"query-string":20}],35:[function(require,module,exports){
'use strict';

var cachebust = require('./cachebust');
var cutoff = require('./cutoff');
var buildContentNode = require('./buildContentNode');
var icon = require('./icon');
var respImg = require('./respImg');
var sublink = require('./sublink');
var qs = require('query-string');

var buildCollectionFeed = function buildCollectionFeed(page, _ref) {
  var id = _ref.id,
      content = _ref.content,
      description = _ref.description;

  var append = $('\n    <div class="collection-intro">\n      <div class="collection-description">' + description + '</div>\n      <div class="collection-introBottom">\n        <label class="collection-searchLabel" for="filter">Search within this collection</label>\n        <span class="collection-search">\n          ' + icon('search', 'type') + '\n          <input name="filter" type="text" placeholder="Search">\n        </span>\n      </div>\n    </div>\n    <p class="content-subheading"></p>\n    <ul class="collection">\n      ' + content.map(function (item) {
    return buildContentNode(item);
  }).join(' ') + '\n    </ul>\n  ');

  page.append(append);

  var params = { collection: id };
  var $feed = page.find('.collection');
  var $subhead = page.find('.content-subheading');
  page.find('input').keyup(function (e) {
    var _this = this;

    window.TIMEOUT = setTimeout(function () {
      var term = $(_this).val();
      var endpoint = '/wp-json/v1/search/' + term + '?' + qs.stringify(params) + cachebust(true);
      window.SEARCHTERM = term;

      $.get(endpoint, function (_ref2) {
        var total_hits = _ref2.total_hits,
            items = _ref2.items,
            results = _ref2.results;

        if (!items) {
          $subhead.text('No results found');
          $feed.empty();
          return;
        }

        $subhead.html('\n          <span>Showing ' + total_hits + ' hits across ' + results + ' files</span>\n          <button class="content-cutoff" data-cutoff-all data-alttext=\'Contract All ' + icon('up') + '\'>Expand All ' + icon('down') + '</button>\n        ');
        $feed.html(items.map(buildContentNode).join(' '));

        sublink(page.find('[data-sublink]'));
        cutoff(page.find('[data-cutoff]'), page.find('[data-cutoff-all]'));
      });
    }, 200);
  }).submit(function (e) {
    e.preventDefault;
  });
};

module.exports = buildCollectionFeed;

},{"./buildContentNode":39,"./cachebust":49,"./cutoff":50,"./icon":57,"./respImg":60,"./sublink":65,"query-string":20}],36:[function(require,module,exports){
'use strict';

var icon = require('./icon');
var respBg = require('./respBg');
var respImg = require('./respImg');
var socialLinks = require('./socialLinks');
var eqHeight = require('./eqHeight');

var buildCollectionHeader = function buildCollectionHeader(page, data) {
  var header = $('<header class="contentHeader contentHeader--collection" />');
  var hero = $('<figure class="heroImg js-respBg" data-set="hero" data-id="' + data.image + '">');
  var inner = $('<div class="contentHeader-inner contentHeader-inner--hasBottom" />');
  var bottom = $('<div class="contentHeader-bottom" />');
  var imgWrapper = $('<div class="contentHeader-imgWrapper" />');
  header.append(hero);
  bottom.append('<span class="contentHeader-type contentHeader-type--collection">' + icon('collection', 'type') + 'Collection</span>');
  bottom.append('<h2 class="collection-head">' + data.name + '</h2>');
  inner.append(bottom);
  imgWrapper.append(respImg.markup(data.image, 'feat_lg', 'respImg contentHeader-img', null, true));
  imgWrapper.append('<div class="shareLinks">Share this collection' + socialLinks(data.link, data.title, data.description.replace(/(<([^>]+)>)/ig, ""), data.description.replace(/(<([^>]+)>)/ig, "")) + '</div>');
  header.append(inner);
  header.append(imgWrapper);
  page.append(header);
  respBg(hero);
};

module.exports = buildCollectionHeader;

},{"./eqHeight":52,"./icon":57,"./respBg":59,"./respImg":60,"./socialLinks":63}],37:[function(require,module,exports){
'use strict';

var internalLink = require('./internalLink');

var buildCollectionsList = function buildCollectionsList(collections) {

  var the = collections[0].link_text.startsWith('The') ? '' : 'the ';

  var html = '<p class="contentHeader-collectionsList">Part of ' + the + '<strong> ';
  html += internalLink(collections[0], collections[0].link_text);
  if (collections.length > 2) {
    for (var i = 1, x = collections.length - 1; i < x; i++) {
      html += ', ' + internalLink(collections[i], collections[i].link_text);;
    }
  }
  if (collections.length > 1) {
    if (collections.length > 2) html += ', ';
    html += ' <span class="contentheader-collectionsAnd">and</span> ';
    html += internalLink(collections[collections.length - 1], collections[collections.length - 1].link_text);
  }
  html += '</strong> collection';
  if (collections.length > 1) {
    html += 's';
  }
  html += '</p>';
  return html;
};

module.exports = buildCollectionsList;

},{"./internalLink":58}],38:[function(require,module,exports){
'use strict';

var icon = require('./icon');
var internalLink = require('./internalLink');

var buildConnected = function buildConnected(related) {
  var list = $('<ul class="relatedItem-wrapper"/>');
  for (var i = 0, x = related.length; i < x; i++) {
    var listItem = $('<li class="relatedItem relatedItem--' + related[i].type + '" />');
    listItem.append(internalLink(related[i], icon(related[i].type, 'type') + related[i].name));
    list.append(listItem);
  }
  return list;
};

module.exports = buildConnected;

},{"./icon":57,"./internalLink":58}],39:[function(require,module,exports){
'use strict';

var icon = require('./icon');
var internalLink = require('./internalLink');
var respImg = require('./respImg');

var buildContentNode = function buildContentNode(_ref) {
  var type = _ref.type,
      id = _ref.id,
      title = _ref.title,
      excerpt = _ref.excerpt,
      hits = _ref.hits,
      img_set = _ref.img_set,
      link = _ref.link;

  var imgHtml = '',
      hitCount = void 0,
      hitHtml = void 0;
  if (hits && hits.length > 0) {
    var cutoff = 5;
    hitCount = hits.length;
    hitHtml = '\n      <ul class="content-hits">\n        ' + hits.slice(0, cutoff).map(function (hit) {
      return '<li\n          class="content-data-sublink"\n          data-sublink="' + hit.timestamp + '"\n          tabindex="0"\n          >' + hit.text + '</li>\n        ';
    }).join('') + '\n      </ul>\n      ' + (hitCount > cutoff ? '\n        <ul class="content-hits hidden">\n          ' + hits.map(function (hit) {
      return '<li\n            class="content-data-sublink"\n            data-sublink="' + hit.timestamp + '"\n            tabindex="0"\n            >' + hit.text + '</li>\n          ';
    }).join('') + '\n        </ul>\n        <button class="content-cutoff" data-cutoff=".hidden" data-alttext=\'View Less ' + icon('up') + '\' data-nolink="true">View More ' + icon('down') + '</button>\n      ' : '') + '\n    ';
  }

  if (img_set) {
    imgHtml = '\n    <div class="content-imgWrapper">\n      <img\n        src="' + img_set.sizes.md + '"\n        class="respImg-none"\n        alt="' + (img_set.alt || '') + '"\n        ' + (img_set.caption ? ' data-caption="' + img_set.caption + '"' : null) + '\n        ' + (img_set.group ? ' data-group="' + img_set.group + '"' : null) + '\n      >\n    </div>\n    ';
  }

  var content = '\n    <article class="content content--' + type + '" data-id="' + id + '">\n      <div class="content-inner">\n        <span class="content-type">' + icon(type, 'type') + ' ' + type + '</span>\n        <h3 class="content-head">\n          ' + title + '\n          ' + (!hitCount ? '' : '&nbsp;<small>(' + hitCount + ' total ' + (hitCount > 1 ? 'hits' : 'hit') + ')</small>') + '\n        </h3>\n        <div class="content-excerpt">' + (hitHtml || excerpt) + '</div>\n        <div class="content-link">View The ' + type + ' ' + icon('right', 'link') + '</div>\n      </div>\n      ' + imgHtml + '\n    </article>\n  ';
  return internalLink({
    id: id,
    type: type,
    link: link
  }, content);
};

module.exports = buildContentNode;

},{"./icon":57,"./internalLink":58,"./respImg":60}],40:[function(require,module,exports){
'use strict';

var buildCollectionsList = require('./buildCollectionsList');
var buildConnected = require('./buildConnected');
var icon = require('./icon');
var scrollIndicator = require('./scrollIndicator');
var socialLinks = require('./socialLinks');

var buildInterviewsHeader = function buildInterviewsHeader(wrapper, data) {

  var outer = $('<div class="contentHeaderOuter" />');
  var header = $('<header class="contentHeader contentHeader--interview"/>');
  var inner = $('<div class="contentHeader-inner" />');
  var imgWrapper = $('<div class="contentHeader-imgWrapper" />');

  header.append('<span class="contentHeader-type">' + icon('interview', 'type') + 'Interview</span>');

  inner.append('<h2 class="contentHeader-head">' + data.name + '</h2>');

  if (data.collections) {
    var collections = buildCollectionsList(data.collections);
    inner.append(collections);
  }

  if (data.introduction) {
    inner.append('<div class="contentHeader-introduction">' + data.introduction + '</div>');
  }

  if (data.related) {
    var related = buildConnected(data.related);
    inner.append('<h3 class="contentHeader-relatedHead">Related to</h3>');
    inner.append(related);
  }

  inner.append('<span class="contentHeader-selectWrapper" id="selectwrap-' + data.id + '" style="display:none"><select class="contentHeader-select" id="select-' + data.id + '"><option value="null">Contents</option></select></span>');

  var video = $('<video data-able-player data-youtube-id="' + data.video_id + '" data-youtube-playsinline>');

  if (data.transcript_url) {
    video.attr('data-transcript-src', 'transcript-' + data.id);
    video.append('<track kind="captions" src="' + data.transcript_url + '"/>');
  }

  if (data.description_url) {
    video.append('<track kind="descriptions" src="' + data.description_url + '"/>');
  }

  header.append(inner);

  if (data.video_id) {
    imgWrapper.append('<span class="contentHeader-toggleVid" data-action="toggle" data-target=".contentHeader-imgWrapper"><label for="toggleVid">Video Display:</label><select id="toggleVid"><option>Small</option><option selected>Medium</option><option>Large</option><option>Hidden</option></select></span >');
    imgWrapper.append(video);
    imgWrapper.append('<a class="able-fake-pause"></a><div class="contentHeader-searchwrap"><input class="contentHeader-search" id="video-search" placeholder="Search transcript, annotations & descriptions..."></div>');
  }

  imgWrapper.append('<div class="shareLinks">Share this interview' + socialLinks(data.link, data.title, data.introduction.replace(/(<([^>]+)>)/ig, ""), data.introduction.replace(/(<([^>]+)>)/ig, "")) + '</div>');

  header.append(imgWrapper);
  header.append(scrollIndicator.add('.transcript'));
  outer.append(header);
  wrapper.append(outer);
};

module.exports = buildInterviewsHeader;

},{"./buildCollectionsList":37,"./buildConnected":38,"./icon":57,"./scrollIndicator":61,"./socialLinks":63}],41:[function(require,module,exports){
'use strict';

var cachebust = require('./cachebust');
var eqHeight = require('./eqHeight');
var icon = require('./icon');
var internalLink = require('./internalLink');

var buildOtherInCollection = function buildOtherInCollection(page, id, collection) {
  $.get('/wp-json/v1/collections/' + collection.id + '/?count=3&not=' + id + cachebust(true), function (data) {
    if (!data.content.length) return;
    var others = $('<div class="others" />');
    others.append('<h3 class="others-head">Other interviews and timelines in the <strong>' + data.name + '</strong> collection</h3>');
    for (var i = 0, x = data.content.length; i < x; i++) {
      var html = '<article class="others-single others-single--' + data.content[i].type + '">';
      html += '<span class="others-singleType">' + icon(data.content[i].type, 'type') + ' ' + data.content[i].type + '</span>';
      html += '<h4 class="others-singleHead">' + data.content[i].title + '</h4>';
      html += '<p class="others-singleDescription">' + data.content[i].excerpt;
      html += internalLink(data.content[i], 'View the ' + data.content[i].type + ' ' + icon('right', 'link')) + '</p>';
      html += '</article>';
      others.append(html);
    }
    others.append('<div class="others-wrap"><div class="others-link">' + internalLink(collection, 'View The Collection' + icon('right', 'link')) + '</div></div>');
    page.append(others);
    eqHeight('.others-single');
  });
};

module.exports = buildOtherInCollection;

},{"./cachebust":49,"./eqHeight":52,"./icon":57,"./internalLink":58}],42:[function(require,module,exports){
'use strict';

var cachebust = require('./cachebust');
var animatePage = require('./animatePage');
var buildArchive = require('./buildArchive');
var buildCollectionHeader = require('./buildCollectionHeader');
var buildCollectionFeed = require('./buildCollectionFeed');
var buildTimeline = require('./buildTimeline');
var buildTimelineHeader = require('./buildTimelineHeader');
var buildInterviewsHeader = require('./buildInterviewsHeader');
var buildOtherInCollection = require('./buildOtherInCollection');
var buildTranscript = require('./buildTranscript');
var buildSupp = require('./buildSupp');
var eqHeight = require('./eqHeight');
var getNodeFromTimestamp = require('./getNodeFromTimestamp');
var socialHighlight = require('./socialHighlight');
var stickyHeader = require('./stickyHeader');
var syncAblePlayer = require('./syncAblePlayer');
var respBg = require('./respBg');
var respImg = require('./respImg');
var Cookies = require('js-cookie');

var buildPage = function buildPage(wrapper, endpoint, queriedObject, dir) {
  $('[data-action="jumpToActive"], .socialPopup').remove();
  clearInterval(JUMPTOACTIVE);
  var page = $('<article class="page"/>');
  $('body').attr('data-endpoint', endpoint);
  $('body').attr('data-id', queriedObject);
  if (queriedObject === 'archive') {
    if (endpoint === 'search') {
      var term = $('body').attr('data-search').replace('+', ' ');
      window.SEARCHTERM = term;
      document.title = 'Search for ' + term;
      $.get('/wp-json/v1/' + endpoint + '/' + term + '?count=' + COUNT + '&offset=0' + cachebust(true), function (data) {
        buildArchive(page, data, endpoint);
        animatePage(wrapper, page, dir, function () {
          respImg.load('.respImg');
        });
      });
    } else {
      if (endpoint === 'interviews') {
        var order = Cookies.get('ARCHIVEORDER') || 'abc';
        var url = '/wp-json/v1/interviews?order=' + order + '&count=' + COUNT + '&include=all' + cachebust(true);

        $.get(url, function (data) {
          buildArchive(page, data, endpoint, true, ['Media', 'No Media', 'All']);

          animatePage(wrapper, page, dir, function () {
            respImg.load('.respImg');
          });
        });
      } else {
        var _url = '/wp-json/v1/' + endpoint + '?count=' + COUNT + '&offset=0' + cachebust(true);
        $.get(_url, function (data) {
          buildArchive(page, data, endpoint, false, false);
          animatePage(wrapper, page, dir, function () {
            respImg.load('.respImg');
          });
        });
      }
    }
  } else {
    var _url2 = '/wp-json/v1/' + endpoint + '/' + queriedObject + cachebust();
    $.get(_url2, function (data) {
      if (data.name) document.title = data.name;
      DESCRIPTION = data.description;
      if (endpoint === 'timelines') {
        buildTimelineHeader(page, data);
        buildTimeline(page, data.events, data.intro, function () {
          if (window.location.hash) {
            var hash = window.location.hash;
            setTimeout(function () {
              $('body, html').scrollTop($(hash).offset().top);
            }, TRANSITIONTIME);
          }
        });
      } else if (endpoint === 'interviews') {
        if (data.no_media) {
          buildTimelineHeader(page, data, 'Interview');
          buildTranscript(page, data.id, function (transcript) {
            socialHighlight('.transcript');
            buildSupp(page, endpoint, queriedObject, function () {
              if (data.collections.length) {
                buildOtherInCollection(page, data.id, data.collections[0]);
              }
            });
            if (getNodeFromTimestamp()) {
              var timestamp = getNodeFromTimestamp();
              var offset = $('.contentHeaderOuter').outerHeight() + 32;
              setTimeout(function () {
                $('body, html').scrollTop(timestamp.offset().top - offset);
              });
            }
          });
        } else {
          buildInterviewsHeader(page, data);
          buildTranscript(page, data.id, function (transcript) {
            socialHighlight('.transcript');
            buildSupp(page, endpoint, queriedObject, function (supp) {
              if (data.collections.length) {
                buildOtherInCollection(page, data.id, data.collections[0]);
              }
              syncAblePlayer(transcript, data.id, supp);
            }, !!transcript);
            stickyHeader(page, '.contentHeaderOuter', '.contentHeader-inner');
          });
        }
      } else if (endpoint === 'interactives') {
        buildTimelineHeader(page, data, false);
        buildTranscript(page, data.id, function (transcript) {
          socialHighlight('.transcript');
          buildSupp(page, endpoint, queriedObject, null, !!transcript);
        });
      } else if (endpoint === 'collections') {
        buildCollectionHeader(page, data);
        buildCollectionFeed(page, data);
      }

      animatePage(wrapper, page, dir, function () {
        if (endpoint === 'timelines' && $('.respImg').length < 1) {
          buildSupp(page, endpoint, queriedObject, function () {
            if (data.collections.length) {
              buildOtherInCollection(page, data.id, data.collections[0]);
            }
          }, true);
          return;
        }

        respImg.load('.respImg', function () {
          if (endpoint === 'timelines') {
            buildSupp(page, endpoint, queriedObject, function () {
              if (data.collections.length) {
                buildOtherInCollection(page, data.id, data.collections[0]);
              }
            }, true);
          }
        });
        eqHeight('.others-single');
      });
    });
  }
};

module.exports = buildPage;

},{"./animatePage":32,"./buildArchive":34,"./buildCollectionFeed":35,"./buildCollectionHeader":36,"./buildInterviewsHeader":40,"./buildOtherInCollection":41,"./buildSupp":43,"./buildTimeline":45,"./buildTimelineHeader":46,"./buildTranscript":47,"./cachebust":49,"./eqHeight":52,"./getNodeFromTimestamp":53,"./respBg":59,"./respImg":60,"./socialHighlight":62,"./stickyHeader":64,"./syncAblePlayer":66,"js-cookie":15}],43:[function(require,module,exports){
'use strict';

var cachebust = require('./cachebust');
var buildSuppInner = require('./buildSuppInner');
var getUrlWithNoHash = require('./getUrlWithNoHash');
var icon = require('./icon');
var internalLink = require('./internalLink');
var socialLinks = require('./socialLinks');
var syncTimestamps = require('./syncTimestamps');

var buildSupp = function buildSupp(page, endpoint, queriedObject, callback, mainContentExists) {

  var aside = $('<aside class="suppCont" />');

  $.get('/wp-json/v1/' + endpoint + '/' + queriedObject + '/supp' + cachebust(), function (data) {
    var timestamps = {};
    var unmatched = [];
    var index = 0;

    $(data).each(function () {
      var timestamp = this.timestamp.toString();
      if (timestamp || timestamp === 0 && mainContentExists) {
        timestamps[timestamp] = timestamps[timestamp] || [];
        timestamps[timestamp].push({
          type: this.type,
          data: this.data,
          open: this.open
        });
      } else {
        unmatched.push({
          type: this.type,
          data: this.data
        });
      }
    });

    for (var timestamp in timestamps) {
      var asideInner = $('<ul class="suppCont-inner" data-timestamp="' + timestamp + '" />');
      for (var i = 0, x = timestamps[timestamp].length; i < x; i++) {
        var content = timestamps[timestamp][i];
        var suppContSingle = $('<li tabindex="0" data-opendefault="' + content.open + '" data-action="expand" data-supp="' + index + '" class="suppCont-single suppCont-single--' + content.type + '"/>');
        var inner = '';
        var innerContent = buildSuppInner(content);
        var preview = innerContent.preview;
        var cont = innerContent.cont;

        suppContSingle.append('<button class="suppCont-expand suppCont-expand--type" data-action="close-type">' + icon(content.type, 'suppExpand') + '</button>');
        if (content.class) suppContSingle.addClass('suppCont-single--' + content.class);
        var inner = '<div class="suppCont-singleInner">';
        inner += '<div data-suppcont="' + preview + '" class="suppCont-preview" aria-hidden>' + preview + '</div>';
        inner += '<div class="suppCont-content">' + cont;
        inner += '<div class="suppCont-share">Share this';
        inner += socialLinks(getUrlWithNoHash() + '#sc-' + index, innerContent.preview, window.DESCRIPTION);
        inner += '</div>';
        inner += '</div></div">';
        suppContSingle.append(inner);
        suppContSingle.append('<button data-action="close" class="suppCont-expand">' + icon('expand', 'suppExpand') + '</button>');
        asideInner.append(suppContSingle);
        index = index + 1;
      }
      aside.append(asideInner);
    }

    if (mainContentExists) page.append(aside);

    if (unmatched.length) {
      var type = 'content';
      if (endpoint === 'timelines') {
        type = 'timeline';
      } else if (endpoint === 'interviews') {
        type = 'interview';
      }
      var unmatchedWrapper = $('<section class="unmatched" />');
      var unmatchedList = $('<ul class="unmatched-list" />');
      for (var item in unmatched) {
        var content = unmatched[item];
        var unmatchedItem = $('<li class="unmatched-item unmatched-item--' + content.type + '" />');
        var label = function label(content) {
          switch (content.type) {
            case 'text':
              return content.data.content;
            case 'blockquote':
              return content.data.quote;
            default:
              return content.data.title;
          }
        };
        var innerContent = buildSuppInner(content).cont;
        unmatchedItem.append(icon(content.type, 'type') + ' ' + label(content));
        unmatchedList.append(unmatchedItem);
        unmatchedItem.featherlight({
          html: '<div class="suppCont-lightbox"><div class="suppCont-content">' + innerContent + '</div></div>',
          afterContent: function afterContent() {
            $('body').css('overflow', 'hidden');
            $('.featherlight-close-icon').html(icon('contract', 'suppContent-lightboxClose'));
          },
          afterClose: function afterClose() {
            $('body').css('overflow', '');
          }
        });
      }
      unmatchedWrapper.append('<h3 class="unmatched-head">Additional content related to this ' + type + '</h3>');
      unmatchedWrapper.append(unmatchedList);
      page.append(unmatchedWrapper);
    }

    if (endpoint === 'interviews') {
      syncTimestamps('.suppCont-inner', '.transcript-node', '.transcript');
    } else if (endpoint === 'timelines') {
      syncTimestamps('.suppCont-inner', '.event', '.timeline');
    }

    if (callback) callback({
      timestamps: timestamps,
      unmatched: unmatched
    });
  });
};

module.exports = buildSupp;

},{"./buildSuppInner":44,"./cachebust":49,"./getUrlWithNoHash":54,"./icon":57,"./internalLink":58,"./socialLinks":63,"./syncTimestamps":67}],44:[function(require,module,exports){
'use strict';

var icon = require('./icon');
var internalLink = require('./internalLink');
var respImg = require('./respImg');

var buildSuppInner = function buildSuppInner(content) {

  var preview = '';
  var cont = '';

  switch (content.type) {
    case 'blockquote':
      preview = content.data.quote;
      cont = '<blockquote data-suppcont="' + content.data.quote + '" class="suppCont-quote">' + content.data.quote + '&rdquo;';
      cont += '<footer data-suppcont="' + content.data.attribution + '" class="suppCont-attribution">&mdash; ' + content.data.attribution + '</footer>';
      cont += '</blockquote>';
      break;
    case 'externallink':
      preview = content.data.title;
      cont += '<span data-suppcont="' + content.data.title + '" class="suppCont-contentTitle">' + content.data.title + '</span>';
      if (content.data.description) cont += '<p data-suppcont="' + content.data.description + '">' + content.data.description + '</p>';
      cont += '<a target="_blank" href="' + content.data.link_url + '">';
      cont += (content.data.link_text || 'Visit Link') + icon('right', 'link');
      cont += '</a>';
      content.type = 'link';
      break;
    case 'file':
      preview = content.data.title;
      cont += '<span data-suppcont="' + content.data.title + '" class="suppCont-contentTitle">' + content.data.title + '</span>';
      if (content.data.description) cont += '<p data-suppcont="' + content.data.description + '">' + content.data.description + '</p>';
      cont += '<a target="_blank" href="' + content.data.file + '">';
      cont += 'Download ' + icon('right', 'link');
      cont += '</a>';
      break;
    case 'gallery':
      preview = content.data.title;
      cont += '<span data-suppcont="' + content.data.title + '" class="suppCont-contentTitle">' + content.data.title + '</span>';
      if (content.data.description) cont += '<p data-suppcont="' + content.data.description + '">' + content.data.description + '</p>';
      cont += '<div class="suppCont-gallery">';
      for (var i = 0, x = content.data.imgs.length; i < x; i++) {
        var img = content.data.imgs[i];
        cont += '<span class="suppCont-galleryImage">';
        cont += respImg.markup(img.img_id, 'feat_xs', 'respImg-defer', {
          alt: img.alt,
          caption: img.caption,
          group: content.data.title
        });
        cont += '</span>';
      }
      cont += '</div>';
      break;
    case 'image':
      preview = content.data.title;
      cont += '<span data-suppcont="' + content.data.title + '" class="suppCont-contentTitle">' + content.data.title + '</span>';
      cont += respImg.markup(content.data.img_id, 'feat_sm', 'respImg-defer', {
        alt: content.data.alt,
        caption: content.data.caption
      });
      if (content.data.caption) cont += '<p data-suppcont="' + content.data.caption + '">' + content.data.caption + '</p>';
      break;
    case 'internallink':
      preview = content.data.title;
      content.type = content.data.type;
      content.class = content.data.type;
      cont += '<span data-suppcont="' + content.data.title + '" class="suppCont-contentTitle">' + content.data.title + '</span>';
      cont += respImg.markup(content.data.feat_img, 'feat', 'respImg-defer gallery-single');
      cont += '<p data-suppcont="' + (content.data.link_description || content.data.description) + '">' + (content.data.link_description || content.data.description) + '</p>';
      cont += internalLink(content.data, 'View ' + content.type + icon('right', 'link'));
      break;
    case 'map_location':
      var zoom = content.data.zoom || 17;
      var map_url = 'https://maps.googleapis.com/maps/api/staticmap?center=' + content.data.coords.lat + ',' + content.data.coords.lng + '&size=600x300&zoom=' + zoom + '&markers=color:red%7C' + content.data.coords.lat + ',' + content.data.coords.lng + '&key=' + MAPS_APP_ID;
      preview = content.data.title;
      cont += '<span data-suppcont="' + content.data.title + '" class="suppCont-contentTitle">' + content.data.title + '</span>';
      cont += '<img src="' + map_url + '" alt="Map of ' + content.data.title + '" />';
      break;
    case 'text':
      var tempHtml = document.createElement('div');
      tempHtml.innerHTML = content.data.content;
      preview = tempHtml.textContent || tempHtml.innerText;
      cont = '<div data-suppcont="' + content.data.content + '">' + content.data.content + '</div>';
      break;
  }

  return {
    preview: preview,
    cont: cont
  };
};

module.exports = buildSuppInner;

},{"./icon":57,"./internalLink":58,"./respImg":60}],45:[function(require,module,exports){
'use strict';

var icon = require('./icon');
var respImg = require('./respImg');
var socialLinks = require('./socialLinks');

var buildTimeline = function buildTimeline(wrapper, events, intro, callback) {
  var intro = $('<div class="content-intro">' + intro + '</div>');
  var timeline = $('<ul class="timeline"/>');
  wrapper.append(intro);
  wrapper.append(timeline);

  $(events).each(function (i) {
    var eventHtml = '';
    eventHtml += '<li id="' + i + '" class="event" data-start="' + this.event_date + '">';
    eventHtml += '<span class="event-dot"></span>';
    eventHtml += '<date class="event-date">' + this.event_date + '</date>';
    eventHtml += '<h3 class="event-head">' + this.title + '</h3>';
    if (this.image) {
      eventHtml += '<div class="event-imageWrapper">';
      eventHtml += respImg.markup(this.image, 'feat_lg', 'respImg', null, true);
      eventHtml += '</div>';
    }
    if (this.content.length) {
      eventHtml += '<div class="event-content">' + this.content + '</div>';
    }
    if (this.content_link) {
      eventHtml += '<a class="js-internalLink relatedItem relatedItem--' + this.content_link_type + '"';
      eventHtml += ' data-type="' + this.content_link_type + 's" ';
      eventHtml += ' data-id="' + this.content_link_id + '" ';
      eventHtml += 'href="' + this.content_link + '">' + icon(this.content_link_type, 'type') + ' ' + this.content_link_text + '</a>';
    }
    eventHtml += '<div class="event-social">' + socialLinks(window.location.href.split('#')[0] + '#' + i, this.title, this.content) + '</div>';
    eventHtml += '</li>';
    var eventHtml = $(eventHtml);
    timeline.append(eventHtml);
    eventHtml.addClass('loaded');
  });
  callback();
};

module.exports = buildTimeline;

},{"./icon":57,"./respImg":60,"./socialLinks":63}],46:[function(require,module,exports){
'use strict';

var buildCollectionsList = require('./buildCollectionsList');
var buildConnected = require('./buildConnected');
var icon = require('./icon');
var respImg = require('./respImg');
var socialLinks = require('./socialLinks');

var buildTimelineHeader = function buildTimelineHeader(wrapper, data) {
  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  var header = $('<header class="contentHeader contentHeader--timeline"/>');
  var inner = $('<div class="contentHeader-inner" />');
  var imgWrapper = $('<div class="contentHeader-imgWrapper" />');
  if (type !== false) {
    header.append('\n      <span class="contentHeader-type">\n        ' + icon(data.type, 'type') + '\n        ' + (type || 'Timeline') + '\n      </span>\n    ');
  }
  inner.append('<h2 class="contentHeader-head">' + data.name + '</h2>');

  if (data.collections) {
    var collections = buildCollectionsList(data.collections);
    inner.append(collections);
  }

  if (data.introduction) {
    inner.append('<div class="contentHeader-introduction">' + data.introduction + '</div>');
  }

  if (data.related) {
    var related = buildConnected(data.related);
    inner.append('<h3 class="contentHeader-relatedHead">Related to</h3>');
    inner.append(related);
  }

  header.append(inner);

  if (data.image) {
    imgWrapper.append(respImg.markup(data.image, 'feat_lg', 'respImg contentHeader-img', null, true));
  }

  var intro = data.intro || data.introduction || '';
  imgWrapper.append('<div class="shareLinks">Share this collection' + socialLinks(data.link, data.title, intro.replace(/(<([^>]+)>)/ig, ""), intro.replace(/(<([^>]+)>)/ig, "")) + '</div>');
  header.append(imgWrapper);
  wrapper.append(header);
};

module.exports = buildTimelineHeader;

},{"./buildCollectionsList":37,"./buildConnected":38,"./icon":57,"./respImg":60,"./socialLinks":63}],47:[function(require,module,exports){
'use strict';

var cachebust = require('./cachebust');
var buildTranscriptMarkup = require('./buildTranscriptMarkup');
var highlightTranscript = require('./highlightTranscript');
var highlightSuppCont = require('./highlightSuppCont');
var Cookies = require('js-cookie');

var buildTranscript = function buildTranscript(wrapper, id, cb) {
  var outer = $('<section class="able-transcript-area transcript" id="transcript-' + id + '">');
  var transcript = $('<div id="transcript-inner" class="able-transcript" />');
  var callback = cb || false;

  var getUseDescription = function getUseDescription(init) {
    if (init) {
      var cookies = Cookies.get('Able-Player');
      if (!cookies) return false;

      var json = JSON.parse(cookies);
      return json.preferences && json.preferences.prefDesc;
    } else {
      return !$('.able-button-handler-descriptions').hasClass('buttonOff');
    }
  };

  var getNodes = function getNodes() {
    return null;
  };

  window.JUMPTOINIT = false;
  var onEachNode = function onEachNode(node) {
    window.JUMPTO = $('#select-' + id);
    if (node.type === 'section_break') {
      JUMPTO.append('<option value="' + node.start + '">' + node.contents + '</option>');
      if (!JUMPTOINIT) {
        window.JUMPTOINIT = true;
        JUMPTO.parent().show();
        JUMPTO.on('change', function () {
          var val = $(this).val();
          var offset = 0;
          if (val === 'default') {
            $('body,html').animate({
              scrollTop: 0
            }, TRANSITIONTIME * 2);
            return;
          }
          var offset = $(window).width() >= 568 ? $('.contentHeaderOuter').height() + 16 : 0;
          $('body,html').animate({
            scrollTop: $('.transcript-section[data-timestamp="' + val + '"]').offset().top - offset
          }, TRANSITIONTIME);
          setTimeout(function () {
            offset = offset - jumpto.height();
            $('body,html').animate({
              scrollTop: $('.transcript-section[data-timestamp="' + val + '"]').offset().top - offset
            }, TRANSITIONTIME / 2);
          }, TRANSITIONTIME);
        });
      }
    }
  };

  var url = '/wp-json/v1/interviews/' + id + '/transcript?return=transcript_contents' + cachebust(true);

  $.get(url, function (data) {

    getNodes = function getNodes() {
      return data;
    };

    if (!data) {
      if (callback) callback(data);
      return;
    }

    var html = buildTranscriptMarkup(data, {
      onEach: onEachNode,
      useDescription: getUseDescription(true)
    });

    JUMPTO.append('<option value="default">Back to top</option>');
    transcript.append(html);
    outer.append(transcript);
    outer.append('<div class="able-window-toolbar" />');
    wrapper.append('<div class="transcript-instructions">' + window.INSTRUCTIONS + '</div>');
    wrapper.append(outer);
    if (callback) callback(data);
  });

  $('body').on('click', '.able-button-handler-descriptions', function () {
    var html = buildTranscriptMarkup(getNodes(), {
      onEach: onEachNode,
      useDescription: getUseDescription()
    });
    transcript.html(html);
  });

  var initDebuff = false;
  $('body').on('keyup', '#video-search', function () {
    var _this = this;

    window.SEARCHDEBUFF = setTimeout(function () {
      var value = $(_this).val();
      var keyword = value.length > 2 ? value : false;
      highlightTranscript(transcript, '[data-node]', keyword);
      highlightSuppCont('.suppCont-single', '[data-suppcont]', keyword);
    }, 500);
  });
};

module.exports = buildTranscript;

},{"./buildTranscriptMarkup":48,"./cachebust":49,"./highlightSuppCont":55,"./highlightTranscript":56,"js-cookie":15}],48:[function(require,module,exports){
'use strict';

var buildTranscriptMarkup = function buildTranscriptMarkup(data, _ref) {
  var onEach = _ref.onEach,
      onComplete = _ref.onComplete,
      useDescription = _ref.useDescription;

  if (!data) return;

  var paragraphInit = true;
  var paragraphOpen = false;
  var html = data.reduce(function (acc, node) {
    var markup = '';
    var replaced = false;

    var quotes = function quotes(string) {
      return string.replace(/"/g, '\'');
    };

    switch (node.type) {
      case 'description':
        if (useDescription) {
          markup += paragraphOpen ? '</div>' : '';
          markup += '<div data-node="' + node.contents + '" class="transcript-description">' + node.contents + '</div>';
        }
        break;
      case 'paragraph_break':
        markup += paragraphInit ? '<div class="able-transcript-block">' : '</div>';
        markup += paragraphOpen ? '<div class="able-transcript-block">' : '';
        paragraphInit = false;
        paragraphOpen = !paragraphOpen;
        break;
      case 'section_break':
        markup += paragraphOpen ? '</div>' : '';
        markup += '<div data-node="' + quotes(node.contents) + '" data-highlight="transcript" class="transcript-section able-unspoken" data-timestamp="' + node.start + '">' + node.contents + '</div>';
        break;
      case 'speaker_break':
        markup += paragraphOpen ? '</div>' : '';
        markup += '<div data-node="' + quotes(node.contents) + '" data-highlight="next" class="transcript-speaker able-unspoken">' + node.contents + '</div>';
        break;
      case 'transcript_node':
        var contents = node.contents.replace('href', 'target="_blank" href');
        markup = '<span data-node="' + quotes(node.contents) + '" tabindex="0" class="able-transcript-seekpoint able-transcript-caption transcript-node" data-highlight="transcript" data-start="' + node.start + '" data-end="' + node.end + '">' + contents + '</span>&nbsp;';
        break;
    }

    if (typeof onEach === 'function') onEach(node);
    return acc + markup;
  }, '');
  return html;
};

module.exports = buildTranscriptMarkup;

},{}],49:[function(require,module,exports){
'use strict';

var cachebust = function cachebust(hasArgs) {
  return (hasArgs ? '&' : '?') + 'c=' + Date.now();
};

module.exports = cachebust;

},{}],50:[function(require,module,exports){
'use strict';

var cutoff = function cutoff(elem) {
  var all = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  var alt = $(elem).data('alt');
  var orig = $(elem).text();

  var handleChange = function handleChange() {
    var on = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    var $this = $(this);
    var $target = $this.siblings($this.data('cutoff'));
    $this.data('orig', $this.data('orig') || $this.html());

    if (on !== null) {
      $this.data('on', on);
    } else {
      $this.data('on', !$this.data('on'));
    }

    if ($this.data('on')) {
      $target.show();
      $this.html($this.data('alttext'));
      if (on === null) {
        $target.children(':first').focus();
        $this.siblings().hover(function () {
          $(':focus').blur();
        });
      }
    } else {
      $target.hide();
      $this.html($this.data('orig'));
      if (on === null) {
        $this.siblings().unbind('hover');
      }
    }
  };

  $(elem).click(function () {
    handleChange.bind(this)();
  });

  if (all) {
    $(all).click(function (e) {
      var $this = $(this);
      $this.data('on', !$this.data('on'));
      $this.data('orig', $this.data('orig') || $this.html());
      $this.html($this.data('on') ? $this.data('alttext') : $this.data('orig'));
      $(elem).each(function () {
        handleChange.bind(this)($this.data('on'));
      });
    });
  }
};

module.exports = cutoff;

},{}],51:[function(require,module,exports){
'use strict';

var destroyPage = function destroyPage(wrapper, dir) {
  var prev = wrapper.find('.page:eq(0)');
  if (!IGNOREDIR) {
    prev.css({
      'position': 'absolute',
      'top ': wrapper.offset().top,
      'left': wrapper.offset().left,
      'width': wrapper.width()
    });
    prev.addClass('pageTrans pageTrans--' + dir);
    wrapper.css('min-height', wrapper.height());
    setTimeout(function () {
      prev.remove();
    }, TRANSITIONTIME);
  } else {
    prev.remove();
  }
};

module.exports = destroyPage;

},{}],52:[function(require,module,exports){
'use strict';

var eqHeight = function eqHeight(target, cb) {
  var height = 0;
  var callback = cb || false;
  var eq = function eq() {
    height = 0;
    $(target).css('height', '');
    $(target).each(function () {
      var _height = $(this).height();

      if (_height > height) height = _height;

      if (callback) callback();
    });

    $(target).each(function () {
      $(this).css('height', height);
    });
  };

  eq();
  $(window).resize(eq);
};

module.exports = eqHeight;

},{}],53:[function(require,module,exports){
'use strict';

var getNodeFromTimestamp = function getNodeFromTimestamp() {
  if (window.location.hash) {
    var hash = window.location.hash;
    var match_id = hash.match(/\#(\d*)/);
    if (match_id && match_id[1].length) {
      if ($('[data-start="' + match_id[1] + '"]').length) {
        return $('[data-start="' + match_id[1] + '"]');
      }
    }
  }
  return false;
};

module.exports = getNodeFromTimestamp;

},{}],54:[function(require,module,exports){
'use strict';

var getUrlWithNoHash = function getUrlWithNoHash() {
  return window.location.href.split('#')[0];
};

module.exports = getUrlWithNoHash;

},{}],55:[function(require,module,exports){
'use strict';

var respImg = require('./respImg');
var escapeRegex = require('escape-string-regexp');

var highlightSuppCont = function highlightSuppCont(nodes, subnodes, highlight) {
  var HIGHLIGHT = new RegExp('(' + escapeRegex(highlight) + ')', 'ig');
  $(nodes).each(function () {
    var $subnodes = $(this).find(subnodes);
    var isMatchAll = false;
    $subnodes.each(function () {
      var text = $(this).attr('data-suppcont');
      var isMatch = text.match(HIGHLIGHT);
      if (isMatch) {
        isMatchAll = true;
        $(this).html(text.replace(HIGHLIGHT, '<span class="transcript-highlight">$1</span>'));
      } else {
        $(this).html(text);
      }
    });

    if (isMatchAll) {
      $(this).addClass('expand');
      $(this).find('[data-action="close"] use').attr('xlink:href', '#contract');
      var $img = $(this).find('.respImg-defer');
      respImg.load($img);
    } else {
      $(this).removeClass('expand');
      $(this).find('[data-action="close"] use').attr('xlink:href', '#expand');
    }
  });
};

module.exports = highlightSuppCont;

},{"./respImg":60,"escape-string-regexp":8}],56:[function(require,module,exports){
'use strict';

var escapeRegex = require('escape-string-regexp');

var highlightTranscript = function highlightTranscript(transcript, selector, highlight) {
  highlight = highlight && escapeRegex(highlight);
  var nodes = transcript.find(selector);

  $(nodes).each(function () {
    var text = $(this).attr('data-node');
    var html = $(this).html();

    if (!highlight) {
      $(this).html(text);
      return;
    }

    var replaced = text.replace(new RegExp('(' + highlight + ')', 'ig'), '<span class="transcript-highlight">$1</span>');

    if (replaced === text) {
      $(this).html(text);
      return;
    }

    if (replaced === html) {
      return;
    }

    $(this).html(replaced);
  });
};

module.exports = highlightTranscript;

},{"escape-string-regexp":8}],57:[function(require,module,exports){
'use strict';

var icon = function icon(id, className) {
  var className = className || false;
  if (id === 'condense' || id === 'explode') {
    return '<svg class="icon' + (className ? ' icon--' + className : '') + '" viewBox="0 0 72 72"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#' + id + '"></use></svg>';
  }
  return '<svg class="icon' + (className ? ' icon--' + className : '') + '" viewBox="0 0 128 128"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#' + id + '"></use></svg>';
};

module.exports = icon;

},{}],58:[function(require,module,exports){
'use strict';

var internalLink = function internalLink(_ref, inner) {
  var type = _ref.type,
      id = _ref.id,
      link = _ref.link;

  type = type + (type === 'interactive' ? '' : 's');
  return '\n    <a class="js-internalLink"\n      data-type=' + type + '\n      data-id="' + id + '"\n      href=' + link + '\n    >' + inner + '</a>\n  ';
};

module.exports = internalLink;

},{}],59:[function(require,module,exports){
'use strict';

var cachebust = require('./cachebust');

var respBg = function respBg(elem) {
  var id = elem.attr('data-id');
  var set = elem.attr('data-set');
  var getSize = function getSize() {
    var w = $(window).width();
    if (w >= 1200) return 'lg';
    if (w >= 992) return 'md';
    if (w >= 768) return 'sm';
    return 'xs';
  };

  $.get('/wp-json/v1/images/' + id + '/' + set + '_' + getSize() + cachebust(), function (data) {
    elem.css('background-image', 'url(' + data.requested + ')');
  });
};

module.exports = respBg;

},{"./cachebust":49}],60:[function(require,module,exports){
'use strict';

window.featherlight = require('./thirdparty/featherlight.min');
window.featherlightGallery = require('./thirdparty/featherlight.gallery.min.js');

var cachebust = require('./cachebust');
var internalLink = require('./internalLink');

var respImg = {
  markup: function markup(id, size, className, info, hasExtCredit, link) {
    if (info) {
      var alt = info.alt || false;
      var caption = info.caption || false;
      var group = info.group || false;
    }
    var img = '';
    img += '<img src="#" class="' + className + '" ';
    img += 'data-size="' + size + '" ';
    img += 'data-src="' + id + '" ';
    if (alt) img += 'alt="' + alt + '" ';
    if (caption) img += 'data-caption="' + caption + '" ';
    if (group) img += 'data-group="' + group + '" ';
    if (hasExtCredit) img += 'data-showcredit';
    img += ' />';
    if (link) return internalLink(link, img);
    return img;
  },

  load: function load(className, cb) {
    var callback = cb || false;
    var images = $(className);

    var creditMarkup = function creditMarkup(info, className) {
      var credit = '';
      if (info.author && info.author.length) {
        credit += '<span class="' + className + '">Photo credit: ';
        if (info.src.length) {
          credit += '<a href="' + info.src + '">';
        }
        credit += info.author;
        if (info.src.length) {
          credit += '</a>';
        }
        credit += '</span>';
        return credit;
      } else {
        return '';
      }
    };

    images.each(function (i) {
      var src = $(this).attr('data-src');
      var size = $(this).attr('data-size');
      $.get('/wp-json/v1/images/' + src + '/' + size + cachebust(), function (data) {
        var temp = new Image();

        temp.onload = function () {

          $(this).attr('src', data.requested);
          $(this).attr('alt', data.alt);
          if (typeof $(this).attr('data-showcredit') !== 'undefined') {
            $(this).after(creditMarkup(data.credit, 'respImg-credit'));
          }

          if (typeof className === 'string') {
            $(this).addClass(className.substr(1) + '--loaded');
          } else {
            var selector = className.selector;
            var selectorSplit = selector.split(' ');
            selector = selectorSplit[selectorSplit.length - 1];
            $(this).addClass(selector.substr(1) + '--loaded');
          }

          if (images.length - 1 === i && callback) callback();
        }.bind(this);

        temp.src = data.requested;

        $(this).attr('data-img', data.original);

        var opts = {
          targetAttr: 'data-img',
          afterContent: function afterContent() {
            $('.img-caption').remove();
            var lightbox = $('.featherlight-content');
            var src = $('.featherlight-image').attr('src');
            var caption = $('[data-img="' + src + '"]').attr('data-caption') || data.caption || false;
            if (caption) {
              var credit = '';
              if (data.credit.author.length) {
                credit = creditMarkup(data.credit, 'img-credit');
              }
              lightbox.append('<div class="img-caption">' + caption + credit + '</div>');
            }

            $('body').css('overflow', 'hidden');
          },
          afterClose: function afterClose() {
            $('body').css('overflow', '');
          }
        };

        if ($(this).parent().hasClass('js-internalLink')) {
          return;
        } else if (!$(this).attr('data-group')) {
          $(this).featherlight(opts);
        } else {
          $('[data-group="' + $(this).attr('data-group') + '"]').featherlightGallery(opts);
        }
      }.bind(this));
    });
  }

};

module.exports = respImg;

},{"./cachebust":49,"./internalLink":58,"./thirdparty/featherlight.gallery.min.js":68,"./thirdparty/featherlight.min":69}],61:[function(require,module,exports){
'use strict';

var icon = require('./icon');

var scrollIndicator = {

  scrollIndicator: $('<div class="scrollIndicator">' + icon('down', 'scrollIndicator') + '</div>'),

  remove: function remove() {
    this.scrollIndicator.remove();
  },

  add: function add(ref) {
    this.toggle(ref);
    $(window).on('scroll resize', function () {
      this.toggle(ref);
    }.bind(this));

    this.scrollIndicator.click(function () {
      $('body,html').animate({
        scrollTop: function () {
          var offset = 110;
          return $(ref).offset().top - offset;
        }()
      }, 500);
    });

    return this.scrollIndicator;
  },

  toggle: function toggle(elem) {
    if (!$(elem).length) return;

    if ($(window).scrollTop() + $(window).height() > $(elem).offset().top + 33) {
      this.scrollIndicator.addClass('scrollIndicator--hidden');
    } else {
      this.scrollIndicator.removeClass('scrollIndicator--hidden');
    }
  }

};

module.exports = scrollIndicator;

},{"./icon":57}],62:[function(require,module,exports){
'use strict';

var getUrlWithNoHash = require('./getUrlWithNoHash');
var socialLinks = require('./socialLinks');

var socialHighlight = function socialHighlight(target) {

  var popup = $('<span class="socialPopup" />');
  var popupOpen = false;

  if (window.IS_TOUCH_SCREEN) {
    $(document).on('selectionchange', function () {
      var handler = function handler() {
        popup.show();
        $('body').unbind('touchend', handler);
      };

      $('body').on('touchend', handler);

      $(target).trigger('touchend');
    });
  }

  $('body').on('mousedown', function () {
    if (popupOpen) {
      popup.hide();
      popupOpen = false;
    }
  });

  popup.on('mousedown', function (e) {
    e.preventDefault();
    e.stopPropagation();
  });

  $(target).on('mouseup touchend', function (e) {
    e.stopPropagation();
    var url = getUrlWithNoHash();
    var selection = document.getSelection();
    var text = selection.toString();
    text = text.replace('"', '&quot');

    if (!selection.anchorNode || !selection.focusNode) return;

    var anchor = $(selection.anchorNode.parentNode);
    var focus = $(selection.focusNode.parentNode);
    var first = anchor.index() < focus.index() ? anchor : focus;

    if (anchor.attr('data-highlight') || focus.attr('data-highlight')) {
      if (first.attr('data-highlight') === 'next') {
        var next = first.next();
        var timestamp = next.attr('data-start') || next.attr('data-timestamp');
        url += '#' + timestamp;
      } else if (first.attr('data-highlight') === 'transcript' || focus.attr('data-highlight') === 'transcript') {
        var timestamp = first.attr('data-start') || first.attr('data-timestamp') || focus.attr('data-start') || focus.attr('data-timestamp');
        url += '#' + timestamp;
      }
    }

    var pos = {
      position: 'absolute',
      left: function () {
        var range = selection.getRangeAt(0);
        var rects = range.getClientRects();
        if (rects.length) {
          return (rects[0].left + rects[0].right) / 2;
        }
      }()
    };

    if (!window.IS_TOUCH_SCREEN) {
      pos.position = 'absolute';
      pos.top = function () {
        var range = selection.getRangeAt(0);
        var rects = range.getClientRects();
        var _top = (rects[0].top + rects[0].bottom) / 2;
        var _bottom = rects[rects.length - 1].bottom + 60;
        var wBottom = $(window).height();

        if (_bottom < wBottom) {
          popup.addClass('socialPopup--inverse');
          return rects[rects.length - 1].bottom + 60 + $(window).scrollTop();
        } else {
          popup.removeClass('socialPopup--inverse');
          return _top + $(window).scrollTop();
        }
      };
    } else {
      pos.top = function () {
        var range = selection.getRangeAt(0);
        var rects = range.getClientRects();
        if (rects.length) {
          return rects[0].bottom + $(window).scrollTop();
        }
      };
    }

    popup.css(pos).empty().append('<span>Share this</span>' + socialLinks(url, document.title, text, text));

    if (text.length) {
      popup.show();
    }

    popupOpen = true;
    window.HIGHLIGHTED = text;
    if ($('.socialPopup').length) return;
    $('.body-wrap').append(popup);
  });
};

module.exports = socialHighlight;

},{"./getUrlWithNoHash":54,"./socialLinks":63}],63:[function(require,module,exports){
'use strict';

var fb = require('facebook-share-link');
var Clipboard = require('clipboard');
var icon = require('./icon');

var socialLinks = function socialLinks(url, title, excerpt, extraClipBoardText) {
  var isFbProvided = !!window.FB_APP_ID;

  var url = url || window.location.href;
  var clipBoardText = extraClipBoardText ? extraClipBoardText.trim() + '\n' + url + '\n' : title + ' ' + url;
  var linkList = $('<ul class="social social--inline" data-url="' + url + '" data-excerpt="' + excerpt + '" data-title="' + title + '" />');
  var facebook = $('<li tabindex="0" data-soc="fb"><span>Share on Facebook</span>' + icon('facebook', 'social') + '</li>');
  var twitter = $('<li tabindex="0" data-soc="tw"><span>Share on Twitter</span>' + icon('twitter', 'social') + '</li>');
  var link = $('<li tabindex="0" readonly="readonly" data-soc="link" data-clipboard-text="' + clipBoardText + '"><span class="inner" style="position:static;"><span>Share URL</span>' + icon('link', 'social') + '</span></li>');

  var response = function response(error, isHighlight) {
    var message = '';
    if (error) {
      message = 'Your browser doesn\'t support direct copying.';
    } else if (isHighlight) {
      message = "Selected text plus link copied to clipboard!";
    } else {
      message = "Link copied to clipboard!";
    }
    var className = 'socialCopy ';
    className += error ? 'socialCopy--error' : 'socialCopy--success';
    return '<div class="' + className + '">' + message + '</div>';
  };

  if (isFbProvided) {
    linkList.append(facebook);
  }
  linkList.append(twitter);
  linkList.append(link);

  if (!window.SOCIALINIT) {
    window.SOCIALINIT = true;
    var getQuote = function getQuote(elem) {
      var _excerpt = $(elem).parent().attr('data-excerpt');
      var _title = $(elem).parent().attr('data-title');
      return window.HIGHLIGHTED || _title || _excerpt || window.DESCRIPTION;
    };

    if (isFbProvided) {
      var share = fb(window.FB_APP_ID);
    }

    var quote = getQuote();
    var clipboard = new Clipboard('[data-soc="link"]');
    var clipboardHL = new Clipboard('.socialPopup [data-soc="link"]');
    quote = encodeURIComponent(quote);

    $('body').on('keyup', function () {
      var link = $('[data-soc="link"]');
      if (!link) return;
      var selection = document.getSelection();
      var text = selection.toString();
      text = text.replace('"', '&quot;');
      if (text.length) window.HIGHLIGHTED = text;

      if (selection.anchorNode) {
        var anchor = $(selection.anchorNode.parentNode);
        var focus = $(selection.focusNode.parentNode);
        var first = anchor.index() < focus.index() ? anchor : focus;
        var _url;

        if (anchor.attr('data-highlight')) {
          if (first.attr('data-highlight') === 'next') {
            var next = first.next();
            var timestamp = next.attr('data-start') || next.attr('data-timestamp');
            _url = url + '#' + timestamp;
          } else if (anchor.attr('data-highlight') === 'transcript') {
            var timestamp = first.attr('data-start') || first.attr('data-timestamp');
            _url = url + '#' + timestamp;
          }
        }

        link.attr('data-clipboard-text', text ? text + '\n' + _url + '\n' : _url);
        clipboard = new Clipboard('[data-soc="link"]');
      }
    });

    if (isFbProvided) {
      $('body').on('click', '[data-soc="fb"]', function () {
        var url = $(this).parent().attr('data-url');
        var quote = getQuote(this);
        var link = share({
          href: url,
          display: 'popup',
          quote: quote
        });
        window.open(link, 'fbShareWindow', 'height=450, width=550, top=' + ($(window).height() / 2 - 275) + ', left=' + ($(window).width() / 2 - 225) + ', toolbar=0, location=0, menubar=0, directories=0, scrollbars=0');
      });
    }

    $('body').on('click', '[data-soc="tw"]', function () {
      var url = encodeURIComponent($(this).parent().attr('data-url'));
      var quote = encodeURIComponent(getQuote(this));
      var link = 'https://twitter.com/intent/tweet?url=' + url + '&text=' + quote;
      window.open(link, 'twShareWindow', 'height=450, width=550, top=' + ($(window).height() / 2 - 275) + ', left=' + ($(window).width() / 2 - 225) + ', toolbar=0, location=0, menubar=0, directories=0, scrollbars=0');
    });

    var wasClipboardSuccessful = false;

    clipboard.on('success', function () {
      wasClipboardSuccessful = true;
      $('body').append(response());
      $('.socialCopy').css({
        position: 'absolute',
        right: '1em',
        bottom: 'auto',
        top: function top() {
          var bottom = $(window).scrollTop() + $(window).height() - 16 - $(this).height() + 'px';
          return bottom;
        }
      });
      setTimeout(function () {
        $('.socialCopy').remove();
      }, 2000);
    });

    clipboardHL.on('success', function () {
      wasClipboardSuccessful = true;
      $('body').append(response(false, true));
      $('.socialCopy').css({
        position: 'absolute',
        right: '1em',
        bottom: 'auto',
        top: function top() {
          var bottom = $(window).scrollTop() + $(window).height() - 16 - $(this).height() + 'px';
          return bottom;
        }
      });
      setTimeout(function () {
        $('.socialCopy').remove();
      }, 2000);
    });

    $('body').on('click', '[data-soc="link"]', function (e) {
      e.preventDefault();
      setTimeout(function () {
        if (!wasClipboardSuccessful) {
          handleClipboardError();
        }
        wasClipboardSuccessful = false;
      }, 250);
    });

    var handleClipboardError = function handleClipboardError() {
      var _url = $('body > textarea').val();
      $('body > textarea').remove();
      $.featherlight({
        html: '<div class="featherlight-inner"><div class="featherlight-textarea"><p>Copy the link and text below.</p><textarea>' + _url + '</textarea></div></div>',
        afterContent: function afterContent() {
          $('body').css('overflow', 'hidden');
          $('.featherlight-close').addClass('featherlight-close--textarea');
          $('.featherlight-inner').append(response(true));
          $('.socialCopy').css({
            position: 'absolute',
            right: '1em',
            bottom: 'auto',
            top: function top() {
              var bottom = $(window).scrollTop() + $(window).height() - 16 - $(this).height() + 'px';
              return bottom;
            }
          });
          var input = $('.featherlight-inner').find('textarea');

          input.each(function () {
            this.style.height = this.scrollHeight + 'px';
            this.selectionStart = 0;
            this.selectionEnd = 999;
          });
        },
        afterClose: function afterClose() {
          $('body').css('overflow', '');
        }
      });
      setTimeout(function () {
        $('.socialCopy').remove();
      }, 2000);
    };

    clipboard.on('error', handleClipboardError);
  }

  return linkList[0].outerHTML;
};

module.exports = socialLinks;

},{"./icon":57,"clipboard":4,"facebook-share-link":9}],64:[function(require,module,exports){
'use strict';

var stickyHeader = function stickyHeader(page, elem, target) {

  var bottom = $(target).offset().top + $(target).height();
  var height = $(elem).height();
  var unsticky = true;
  var hasVideo = $('video').length;
  var oldTop = 0;

  var handleOn = function handleOn() {
    $(elem).addClass(elem.slice(1) + '--sticky');
    page.css('padding-top', height);
    unsticky = false;
    setTimeout(function () {
      if (typeof AP !== 'undefined') AP.refreshControls();
    }, 500);
  };

  var handleOff = function handleOff() {
    $(elem).removeClass(elem.slice(1) + '--sticky');
    page.css('padding-top', '');
    unsticky = true;
    setTimeout(function () {
      if (typeof AP !== 'undefined') AP.refreshControls();
    }, 500);
  };

  var handler = function handler() {
    if (!hasVideo) {
      handleOff();
      return;
    }
    var top = $(window).scrollTop();
    if (top > bottom && unsticky) {
      handleOn();
    } else if (top < bottom && !unsticky) {
      handleOff();
    }

    if (top < oldTop) {
      $(elem).addClass(elem.slice(1) + '--justScrolledUp');
    } else {
      $(elem).removeClass(elem.slice(1) + '--justScrolledUp');
    }

    oldTop = top;
  };

  $(window).on('scroll resize orientationchange', handler);

  $(elem).find('[data-action="top"]').click(function () {
    $('body, html').animate({
      scrollTop: 0
    }, TRANSITIONTIME);
  });

  $(elem).find('[data-action="toggle"] select').change(function () {
    var size = $(this).val().toLowerCase();
    var selector = $(this).parent().attr('data-target');
    var target = $(selector);
    target.removeClass();
    target.addClass(selector.slice(1) + ' ' + selector.slice(1) + '--' + size);
    setTimeout(function () {
      if (typeof AP !== 'undefined') AP.refreshControls();
    }, 500);
  });

  $(elem).on('click', '.able-fake-pause', function () {
    if (typeof AP == 'undefined') return;
    if (AP.playing) {
      AP.pauseMedia();
    } else {
      AP.playMedia();
    }
  });
};

module.exports = stickyHeader;

},{}],65:[function(require,module,exports){
'use strict';

var sublink = function sublink(elem) {
  var handleOn = function handleOn() {
    console.log('handleOn');
    var $link = $(this).closest('a');
    var sublink = $(this).attr('data-sublink');
    var href = $link.data('href') || $link.attr('href');
    $link.data('href', href);
    $link.attr('href', href + '#' + sublink);
  };

  var handleOff = function handleOff() {
    var $link = $(this).closest('a');
    $link.attr('href', $link.data('href'));
  };

  var pseudoClick = function pseudoClick(e) {
    console.log(e);
    if (e.which !== 13) return;
    console.log('pseudoclick');
    $(this).closest('a').trigger('click');
  };

  $(elem).hover(handleOn, handleOff).focus(handleOn).blur(handleOff).keypress(pseudoClick);
};

module.exports = sublink;

},{}],66:[function(require,module,exports){
'use strict';

window.Cookies = require('js-cookie');
var cachebust = require('./cachebust');
var icon = require('./icon');
var getNodeFromTimestamp = require('./getNodeFromTimestamp');

var syncAblePlayer = function syncAblePlayer(transcript, id, supp) {
  $('body').removeClass('hasAblePlayer');
  $('video').each(function (index, element) {
    $('body').addClass('hasAblePlayer');
    if ($(element).data('able-player') !== undefined) {
      window.AP = new AblePlayer($(this), $(element));

      var sections = transcript.filter(function (node) {
        return node.type === 'section_break';
      });

      var headings = sections.filter(function (node) {
        return !node.note_chapter;
      }).map(function (node) {
        return {
          text: node.contents,
          start: node.start
        };
      });

      var chapters = sections.filter(function (node) {
        return node.note_chapter;
      }).map(function (node) {
        return {
          text: node.contents,
          start: node.start
        };
      });

      var body = transcript.filter(function (node) {
        return node.type !== 'paragraph_break' && node.type !== 'description';
      }).map(function (node) {
        return {
          text: node.contents,
          start: node.start
        };
      });

      var suppContent = Object.entries(supp.timestamps).map(function (node) {
        var values = ['content', 'blockquote', 'attribution', 'title', 'description', 'link_text'];
        var pieces = node[1];
        return {
          text: pieces.reduce(function (all, piece) {
            return all + values.reduce(function (acc, value) {
              if (piece.data[value]) {
                acc += piece.data[value];
              }
              return acc;
            }, '');
          }, ''),
          start: parseInt(node[0])
        };
      });

      var tryYouTube = setInterval(function () {
        var youTubePlayer = AP.youTubePlayer;
        if (youTubePlayer && youTubePlayer.getDuration && !!youTubePlayer.getDuration()) {
          var duration = youTubePlayer.getDuration();

          ableplayerAddDots(AP, headings, {
            duration: duration,
            format: 'array',
            color: window.HEADINGOPTS.COLOR || '#fff',
            width: window.HEADINGOPTS.WIDTH || 1,
            height: window.HEADINGOPTS.HEIGHT || false,
            display: window.HEADINGOPTS.DISPLAY || 'line'
          }).then(function (player) {
            clearInterval(tryYouTube);
            ableplayerAddDots(player, chapters, {
              duration: duration,
              format: 'array',
              color: window.CHAPTEROPTS.COLOR || '#fff',
              width: window.CHAPTEROPTS.WIDTH || 1,
              height: window.CHAPTEROPTS.HEIGHT || false,
              display: window.CHAPTEROPTS.DISPLAY || 'line'
            }).then(function (player) {
              ableplayerSearch(player, '#video-search', body, {
                duration: duration,
                color: window.SEARCHOPTS.COLOR || '#fff',
                width: window.SEARCHOPTS.WIDTH || 1,
                height: window.SEARCHOPTS.HEIGHT || false,
                display: window.SEARCHOPTS.DISPLAY || 'line'
              }).then(function (player) {
                ableplayerSearch(player, '#video-search', suppContent, {
                  duration: duration,
                  color: window.SUPP_CONT_OPTS.COLOR || '#fff',
                  width: window.SUPP_CONT_OPTS.WIDTH || 1,
                  height: window.SUPP_CONT_OPTS.HEIGHT || false,
                  display: window.SUPP_CONT_OPTS.DISPLAY || 'line'
                }).then(function (player) {
                  $('#video-search').val(window.SEARCHTERM).trigger('keyup');
                  $.ajax({
                    url: '/wp-json/v1/interviews/' + id + '/description' + cachebust(),
                    success: function success(data) {
                      var description = data.description;

                      if (!description.length) return;
                      ableplayerSearch(player, '#video-search', description, {
                        duration: duration,
                        color: window.SEARCHOPTS.COLOR || '#fff',
                        width: window.SEARCHOPTS.WIDTH || 1,
                        height: window.SEARCHOPTS.HEIGHT || false,
                        display: window.SEARCHOPTS.DISPLAY || 'line'
                      }).then(function (player) {}).catch(function (err) {
                        return console.log(err);
                      });
                    }
                  });
                }).catch(function (err) {
                  return console.log(err);
                });
              }).catch(function (err) {
                return console.log(err);
              });
            }).catch(function (err) {
              return console.log(err);
            });
          }).catch(function (err) {
            return console.log(err);
          });
        }
      }, 200);

      var tryClick = setInterval(function () {
        if (typeof AP.initializing === 'undefined') return;
        var captions = $('.able-wrapper .icon-captions');
        var isClicked = false;
        captions.on('click', function () {
          clearInterval(tryClick);
          isClicked = true;
        });
        if (!isClicked) captions.trigger('click');
      }, 200);

      var inViewport = 0;
      JUMPTOACTIVE = setInterval(function () {
        var current = $('.able-highlight');
        if (!current.length) return;

        var currentPos = {
          top: current.offset().top,
          bottom: current.offset().top + current.height()
        };

        var windowPos = {
          top: $(window).scrollTop(),
          bottom: $(window).scrollTop() + $(window).height()
        };

        if (currentPos.top > windowPos.bottom) {
          var _inViewport = 1;
        } else if (currentPos.bottom < windowPos.top) {
          var _inViewport = -1;
        } else {
          var _inViewport = 0;
          $('.transcript-jumpToActive').remove();
        }

        if (_inViewport !== inViewport && _inViewport !== 0) {
          $('.transcript-jumpToActive').remove();
          var jumpToActive = $('<button data-action="jumpToActive" class="transcript-jumpToActive">' + icon(_inViewport === 1 ? 'down' : 'up', 'jump') + 'Jump to active section</button>');
          if (_inViewport === -1) {
            jumpToActive.css({
              top: $(window).width() <= 568 ? 0 : $('.contentHeaderOuter').outerHeight(),
              bottom: 'auto'
            });
          }
          $('body').append(jumpToActive);
        }
        inViewport = _inViewport;
      }, 1000);
    }

    $('body').on('click', '[data-action="jumpToActive"]', function () {
      $(this).hide();
      $('body,html').animate({
        scrollTop: function () {
          var offset = $('.contentHeaderOuter').outerHeight() + 32;
          return $('.able-highlight').offset().top - offset;
        }()
      }, TRANSITIONTIME);
    });
  });

  if (getNodeFromTimestamp()) {
    var timestamp = getNodeFromTimestamp();
    var offset = $('.contentHeaderOuter').outerHeight() + 32;
    setTimeout(function () {
      $('body, html').scrollTop(timestamp.offset().top - offset);
      timestamp.addClass('able-highlight');

      var tryClick = setInterval(function () {
        if (typeof AP.initializing === 'undefined') return;
        timestamp.trigger('click');
        timestamp.on('click', function () {
          clearInterval(tryClick);
        });
      }, 200);
    }, 300);
  }

  $('.able-wrapper').addClass('able-wrapper--loaded');
};

module.exports = syncAblePlayer;

},{"./cachebust":49,"./getNodeFromTimestamp":53,"./icon":57,"js-cookie":15}],67:[function(require,module,exports){
'use strict';

var respImg = require('./respImg');
var icon = require('./icon');

var syncTimestamps = function syncTimestamps(supp, node, transcript) {

  var expand = function expand(target) {
    if ($(window).width() > 568) {
      target.addClass('expand');
      target.find('[data-action="close"] use').attr('xlink:href', '#contract');
      var img = target.find('.respImg-defer');
      respImg.load(img);
    } else {
      var innerContent = $(target).find('.suppCont-content').html();
      var type = $(target).find('.icon')[0].outerHTML;
      $.featherlight({
        html: '<div class="suppCont-lightbox"><div class="suppCont-content">' + type + innerContent + '</div></div>',
        afterContent: function afterContent() {
          $('body').css('overflow', 'hidden');
          var img = $('.featherlight-content').find('.respImg-defer');
          respImg.load(img);
          $('.featherlight-close-icon').html(icon('contract', 'suppContent-lightboxClose'));
        },
        afterClose: function afterClose() {
          $('body').css('overflow', '');
        }
      });
    }
  };

  var expandMultiple = function expandMultiple(target) {
    if ($(window).width() <= 568) return;
    target.addClass('expand');
    target.find('[data-action="close"] use').attr('xlink:href', '#contract');
    var img = target.find('.respImg-defer');
    respImg.load(img);
  };

  expandMultiple($('[data-opendefault="true"]'));

  var position = function position() {
    var lastBottom = 0;
    $(supp).each(function (i) {
      $(this).data('match', $(this).data('match') || function () {
        return $(node + '[data-start="' + $(this).attr('data-timestamp') + '"]');
      }.bind(this)());

      var match = $(this).data('match');
      if (!match.length) return;
      var matchPos = $(match).offset().top;

      if (i > 0) {
        var newTop = matchPos - lastBottom;
        newTop = newTop > 0 ? newTop : 0;
      } else {
        var transcriptTop = $(transcript).offset().top;
        var newTop = matchPos - transcriptTop;
      }

      $(this).css({
        marginTop: newTop,
        transform: 'translateY(-15px)',
        left: 0,
        right: 0
      });

      lastBottom = $(this).offset().top + $(this).height();

      $(this).on('mouseenter', function () {
        $(match).addClass(node.slice(1) + '--suppHover');
      }).on('mouseleave', function () {
        $(match).removeClass(node.slice(1) + '--suppHover');
      });

      $(match).on('mouseenter', function () {
        $(this).addClass(supp.slice(1) + '--suppHover');
      }.bind(this)).on('mouseleave', function () {
        $(this).removeClass(supp.slice(1) + '--suppHover');
      }.bind(this));

      var shouldAdvance = false;
      $(match).blur(function () {
        var next = $(match).next();
        var item = $(this).find('li:eq(0)');
        var lastChild = item.find('li:last-of-type');
        shouldAdvance = true;
        item.focus();
        lastChild.blur(function () {
          if (shouldAdvance) {
            next.focus();
          }
          shouldAdvance = false;
        });
      }.bind(this));
    });
  };

  position();
  $(window).resize(position);

  if (window.location.hash) {
    var hash = window.location.hash;
    var match_id = hash.match(/\#sc\-(\d*)/);
    if (match_id) {
      var match = $('[data-supp="' + match_id[1] + '"]');
      expand(match);
      match.parent().data('match').addClass('able-highlight');
      var offset = $('.contentHeaderOuter').height() + 16;
      $('body, html').scrollTop(match.offset().top - offset);
    }
  }

  $('body').on('click', '.expand [data-action="close"]', function (e) {
    e.stopPropagation();
    $(this).closest('[data-action="expand"] ').removeClass('expand');
    $(this).find('use').attr('xlink:href', '#expand');
  });

  $('body').on('click', '.expand [data-action="close-type"]', function (e) {
    e.stopPropagation();
    $(this).closest('[data-action="expand"] ').removeClass('expand');
  });

  $('body').on('click', '[data-action="expand"]', function () {
    expand($(this));
  });
};

module.exports = syncTimestamps;

},{"./icon":57,"./respImg":60}],68:[function(require,module,exports){
"use strict";

!function (a) {
  "use strict";
  function b(c, d) {
    if (!(this instanceof b)) {
      var e = new b(a.extend({ $source: c, $currentTarget: c.first() }, d));return e.open(), e;
    }a.featherlight.apply(this, arguments), this.chainCallbacks(h);
  }var c = function c(a) {
    window.console && window.console.warn && window.console.warn("FeatherlightGallery: " + a);
  };if ("undefined" == typeof a) return c("Too much lightness, Featherlight needs jQuery.");if (!a.featherlight) return c("Load the featherlight plugin before the gallery plugin");var d = "ontouchstart" in window || window.DocumentTouch && document instanceof DocumentTouch,
      e = a.event && a.event.special.swipeleft && a,
      f = window.Hammer && function (a) {
    var b = new window.Hammer.Manager(a[0]);return b.add(new window.Hammer.Swipe()), b;
  },
      g = d && (e || f);d && !g && c("No compatible swipe library detected; one must be included before featherlightGallery for swipe motions to navigate the galleries.");var h = { afterClose: function afterClose(a, b) {
      var c = this;return c.$instance.off("next." + c.namespace + " previous." + c.namespace), c._swiper && (c._swiper.off("swipeleft", c._swipeleft).off("swiperight", c._swiperight), c._swiper = null), a(b);
    }, beforeOpen: function beforeOpen(a, b) {
      var c = this;return c.$instance.on("next." + c.namespace + " previous." + c.namespace, function (a) {
        var b = "next" === a.type ? 1 : -1;c.navigateTo(c.currentNavigation() + b);
      }), g ? c._swiper = g(c.$instance).on("swipeleft", c._swipeleft = function () {
        c.$instance.trigger("next");
      }).on("swiperight", c._swiperight = function () {
        c.$instance.trigger("previous");
      }) : c.$instance.find("." + c.namespace + "-content").append(c.createNavigation("previous")).append(c.createNavigation("next")), a(b);
    }, beforeContent: function beforeContent(a, b) {
      var c = this.currentNavigation(),
          d = this.slides().length;return this.$instance.toggleClass(this.namespace + "-first-slide", 0 === c).toggleClass(this.namespace + "-last-slide", c === d - 1), a(b);
    }, onKeyUp: function onKeyUp(a, b) {
      var c = { 37: "previous", 39: "next" }[b.keyCode];return c ? (this.$instance.trigger(c), !1) : a(b);
    } };a.featherlight.extend(b, { autoBind: "[data-featherlight-gallery]" }), a.extend(b.prototype, { previousIcon: "&#9664;", nextIcon: "&#9654;", galleryFadeIn: 100, galleryFadeOut: 300, slides: function slides() {
      return this.filter ? this.$source.find(this.filter) : this.$source;
    }, images: function images() {
      return c("images is deprecated, please use slides instead"), this.slides();
    }, currentNavigation: function currentNavigation() {
      return this.slides().index(this.$currentTarget);
    }, navigateTo: function navigateTo(b) {
      var c = this,
          d = c.slides(),
          e = d.length,
          f = c.$instance.find("." + c.namespace + "-inner");return b = (b % e + e) % e, c.$currentTarget = d.eq(b), c.beforeContent(), a.when(c.getContent(), f.fadeTo(c.galleryFadeOut, .2)).always(function (a) {
        c.setContent(a), c.afterContent(), a.fadeTo(c.galleryFadeIn, 1);
      });
    }, createNavigation: function createNavigation(b) {
      var c = this;return a('<span title="' + b + '" class="' + this.namespace + "-" + b + '"><span>' + this[b + "Icon"] + "</span></span>").click(function () {
        a(this).trigger(b + "." + c.namespace);
      });
    } }), a.featherlightGallery = b, a.fn.featherlightGallery = function (a) {
    return b.attach(this, a);
  }, a(document).ready(function () {
    b._onReady();
  });
}(jQuery);

},{}],69:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function (a) {
  "use strict";
  function b(a, c) {
    if (!(this instanceof b)) {
      var d = new b(a, c);return d.open(), d;
    }this.id = b.id++, this.setup(a, c), this.chainCallbacks(b._callbackChain);
  }if ("undefined" == typeof a) return void ("console" in window && window.console.info("Too much lightness, Featherlight needs jQuery."));var c = [],
      d = function d(b) {
    return c = a.grep(c, function (a) {
      return a !== b && a.$instance.closest("body").length > 0;
    });
  },
      e = function e(a, b) {
    var c = {},
        d = new RegExp("^" + b + "([A-Z])(.*)");for (var e in a) {
      var f = e.match(d);if (f) {
        var g = (f[1] + f[2].replace(/([A-Z])/g, "-$1")).toLowerCase();c[g] = a[e];
      }
    }return c;
  },
      f = { keyup: "onKeyUp", resize: "onResize" },
      g = function g(c) {
    a.each(b.opened().reverse(), function () {
      return c.isDefaultPrevented() || !1 !== this[f[c.type]](c) ? void 0 : (c.preventDefault(), c.stopPropagation(), !1);
    });
  },
      h = function h(c) {
    if (c !== b._globalHandlerInstalled) {
      b._globalHandlerInstalled = c;var d = a.map(f, function (a, c) {
        return c + "." + b.prototype.namespace;
      }).join(" ");a(window)[c ? "on" : "off"](d, g);
    }
  };b.prototype = { constructor: b, namespace: "featherlight", targetAttr: "data-featherlight", variant: null, resetCss: !1, background: null, openTrigger: "click", closeTrigger: "click", filter: null, root: "body", openSpeed: 250, closeSpeed: 250, closeOnClick: "background", closeOnEsc: !0, closeIcon: "&#10005;", loading: "", persist: !1, otherClose: null, beforeOpen: a.noop, beforeContent: a.noop, beforeClose: a.noop, afterOpen: a.noop, afterContent: a.noop, afterClose: a.noop, onKeyUp: a.noop, onResize: a.noop, type: null, contentFilters: ["jquery", "image", "html", "ajax", "iframe", "text"], setup: function setup(b, c) {
      "object" != (typeof b === "undefined" ? "undefined" : _typeof(b)) || b instanceof a != !1 || c || (c = b, b = void 0);var d = a.extend(this, c, { target: b }),
          e = d.resetCss ? d.namespace + "-reset" : d.namespace,
          f = a(d.background || ['<div class="' + e + "-loading " + e + '">', '<div class="' + e + '-content">', '<span class="' + e + "-close-icon " + d.namespace + '-close">', d.closeIcon, "</span>", '<div class="' + d.namespace + '-inner">' + d.loading + "</div>", "</div>", "</div>"].join("")),
          g = "." + d.namespace + "-close" + (d.otherClose ? "," + d.otherClose : "");return d.$instance = f.clone().addClass(d.variant), d.$instance.on(d.closeTrigger + "." + d.namespace, function (b) {
        var c = a(b.target);("background" === d.closeOnClick && c.is("." + d.namespace) || "anywhere" === d.closeOnClick || c.closest(g).length) && (d.close(b), b.preventDefault());
      }), this;
    }, getContent: function getContent() {
      if (this.persist !== !1 && this.$content) return this.$content;var b = this,
          c = this.constructor.contentFilters,
          d = function d(a) {
        return b.$currentTarget && b.$currentTarget.attr(a);
      },
          e = d(b.targetAttr),
          f = b.target || e || "",
          g = c[b.type];if (!g && f in c && (g = c[f], f = b.target && e), f = f || d("href") || "", !g) for (var h in c) {
        b[h] && (g = c[h], f = b[h]);
      }if (!g) {
        var i = f;if (f = null, a.each(b.contentFilters, function () {
          return g = c[this], g.test && (f = g.test(i)), !f && g.regex && i.match && i.match(g.regex) && (f = i), !f;
        }), !f) return "console" in window && window.console.error("Featherlight: no content filter found " + (i ? ' for "' + i + '"' : " (no target specified)")), !1;
      }return g.process.call(b, f);
    }, setContent: function setContent(b) {
      var c = this;return (b.is("iframe") || a("iframe", b).length > 0) && c.$instance.addClass(c.namespace + "-iframe"), c.$instance.removeClass(c.namespace + "-loading"), c.$instance.find("." + c.namespace + "-inner").not(b).slice(1).remove().end().replaceWith(a.contains(c.$instance[0], b[0]) ? "" : b), c.$content = b.addClass(c.namespace + "-inner"), c;
    }, open: function open(b) {
      var d = this;if (d.$instance.hide().appendTo(d.root), !(b && b.isDefaultPrevented() || d.beforeOpen(b) === !1)) {
        b && b.preventDefault();var e = d.getContent();if (e) return c.push(d), h(!0), d.$instance.fadeIn(d.openSpeed), d.beforeContent(b), a.when(e).always(function (a) {
          d.setContent(a), d.afterContent(b);
        }).then(d.$instance.promise()).done(function () {
          d.afterOpen(b);
        });
      }return d.$instance.detach(), a.Deferred().reject().promise();
    }, close: function close(b) {
      var c = this,
          e = a.Deferred();return c.beforeClose(b) === !1 ? e.reject() : (0 === d(c).length && h(!1), c.$instance.fadeOut(c.closeSpeed, function () {
        c.$instance.detach(), c.afterClose(b), e.resolve();
      })), e.promise();
    }, resize: function resize(a, b) {
      if (a && b) {
        this.$content.css("width", "").css("height", "");var c = Math.max(a / (parseInt(this.$content.parent().css("width"), 10) - 1), b / (parseInt(this.$content.parent().css("height"), 10) - 1));c > 1 && (c = b / Math.floor(b / c), this.$content.css("width", "" + a / c + "px").css("height", "" + b / c + "px"));
      }
    }, chainCallbacks: function chainCallbacks(b) {
      for (var c in b) {
        this[c] = a.proxy(b[c], this, a.proxy(this[c], this));
      }
    } }, a.extend(b, { id: 0, autoBind: "[data-featherlight]", defaults: b.prototype, contentFilters: { jquery: { regex: /^[#.]\w/, test: function test(b) {
          return b instanceof a && b;
        }, process: function process(b) {
          return this.persist !== !1 ? a(b) : a(b).clone(!0);
        } }, image: { regex: /\.(png|jpg|jpeg|gif|tiff|bmp|svg)(\?\S*)?$/i, process: function process(b) {
          var c = this,
              d = a.Deferred(),
              e = new Image(),
              f = a('<img src="' + b + '" alt="" class="' + c.namespace + '-image" />');return e.onload = function () {
            f.naturalWidth = e.width, f.naturalHeight = e.height, d.resolve(f);
          }, e.onerror = function () {
            d.reject(f);
          }, e.src = b, d.promise();
        } }, html: { regex: /^\s*<[\w!][^<]*>/, process: function process(b) {
          return a(b);
        } }, ajax: { regex: /./, process: function process(b) {
          var c = a.Deferred(),
              d = a("<div></div>").load(b, function (a, b) {
            "error" !== b && c.resolve(d.contents()), c.fail();
          });return c.promise();
        } }, iframe: { process: function process(b) {
          var c = new a.Deferred(),
              d = a("<iframe/>").hide().attr("src", b).css(e(this, "iframe")).on("load", function () {
            c.resolve(d.show());
          }).appendTo(this.$instance.find("." + this.namespace + "-content"));return c.promise();
        } }, text: { process: function process(b) {
          return a("<div>", { text: b });
        } } }, functionAttributes: ["beforeOpen", "afterOpen", "beforeContent", "afterContent", "beforeClose", "afterClose"], readElementConfig: function readElementConfig(b, c) {
      var d = this,
          e = new RegExp("^data-" + c + "-(.*)"),
          f = {};return b && b.attributes && a.each(b.attributes, function () {
        var b = this.name.match(e);if (b) {
          var c = this.value,
              g = a.camelCase(b[1]);if (a.inArray(g, d.functionAttributes) >= 0) c = new Function(c);else try {
            c = a.parseJSON(c);
          } catch (h) {}f[g] = c;
        }
      }), f;
    }, extend: function extend(b, c) {
      var d = function d() {
        this.constructor = b;
      };return d.prototype = this.prototype, b.prototype = new d(), b.__super__ = this.prototype, a.extend(b, this, c), b.defaults = b.prototype, b;
    }, attach: function attach(b, c, d) {
      var e = this;"object" != (typeof c === "undefined" ? "undefined" : _typeof(c)) || c instanceof a != !1 || d || (d = c, c = void 0), d = a.extend({}, d);var f,
          g = d.namespace || e.defaults.namespace,
          h = a.extend({}, e.defaults, e.readElementConfig(b[0], g), d);return b.on(h.openTrigger + "." + h.namespace, h.filter, function (g) {
        var i = a.extend({ $source: b, $currentTarget: a(this) }, e.readElementConfig(b[0], h.namespace), e.readElementConfig(this, h.namespace), d),
            j = f || a(this).data("featherlight-persisted") || new e(c, i);"shared" === j.persist ? f = j : j.persist !== !1 && a(this).data("featherlight-persisted", j), i.$currentTarget.blur(), j.open(g);
      }), b;
    }, current: function current() {
      var a = this.opened();return a[a.length - 1] || null;
    }, opened: function opened() {
      var b = this;return d(), a.grep(c, function (a) {
        return a instanceof b;
      });
    }, close: function close(a) {
      var b = this.current();return b ? b.close(a) : void 0;
    }, _onReady: function _onReady() {
      var b = this;b.autoBind && (a(b.autoBind).each(function () {
        b.attach(a(this));
      }), a(document).on("click", b.autoBind, function (c) {
        c.isDefaultPrevented() || "featherlight" === c.namespace || (c.preventDefault(), b.attach(a(c.currentTarget)), a(c.target).trigger("click.featherlight"));
      }));
    }, _callbackChain: { onKeyUp: function onKeyUp(b, c) {
        return 27 === c.keyCode ? (this.closeOnEsc && a.featherlight.close(c), !1) : b(c);
      }, onResize: function onResize(a, b) {
        return this.resize(this.$content.naturalWidth, this.$content.naturalHeight), a(b);
      }, afterContent: function afterContent(a, b) {
        var c = a(b);return this.onResize(b), c;
      } } }), a.featherlight = b, a.fn.featherlight = function (a, c) {
    return b.attach(this, a, c);
  }, a(document).ready(function () {
    b._onReady();
  });
}(jQuery);

},{}]},{},[33])

//# sourceMappingURL=scripts.min.js.map
